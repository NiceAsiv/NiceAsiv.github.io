<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>course on Asiv&#39;s Blog</title>
    <link>https://niceasiv.cn/categories/course/</link>
    <description>Recent content in course on Asiv&#39;s Blog</description>
    <image>
      <url>https://niceasiv.cn/images/papermod-cover.png</url>
      <link>https://niceasiv.cn/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 07 Dec 2022 18:16:09 +0000</lastBuildDate><atom:link href="https://niceasiv.cn/categories/course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>现代密码学期末复习</title>
      <link>https://niceasiv.cn/posts/cryptonote/</link>
      <pubDate>Wed, 07 Dec 2022 18:16:09 +0000</pubDate>
      
      <guid>https://niceasiv.cn/posts/cryptonote/</guid>
      <description>基于斯坦福大学 密码学一
密码分析的四个手段 唯密文攻击（Ciphtext Only Attack，COA） 定义：唯密文攻击(COA)是指仅仅知道密文的情况下进行分析，求解明文或密钥的密码分析方法。
假定密码分析者拥有密码算法及明文统计特性，并截获了一个或者多个用同一密钥加密的密文，通过对这些密文进行分析求出明文或密钥。COA已知条件最少，经不起唯密文攻击的密码是被认为不安全的。
简单理解：只知道密文，推出明文或密钥，一般用穷举攻击。
已知明文攻击（Known Plaintext Attack，KPA）（也可称为KPA安全） 定义：已知明文攻击(KPA)是指攻击者掌握了部分的明文M和对应的密文C，从而求解或破解出对应的密钥和加密算法。
简单理解：知道部分的明文和密文对，推出密钥和加密算法。
选择明文攻击（Chosen Plaintext Attack，CPA）（也可称为CPA安全） 定义：选择明文攻击(CPA)是指攻击者除了知道加密算法外，还可以选定明文消息，从而得到加密后的密文，即知道选择的明文和加密的密文，但是不能直接攻破密钥。
简单理解：知道明文就知道密文，目标为推出密钥。
选择密文攻击（Chosen Ciphertext Attack，CCA）（也可称为CCA安全） 定义：选择密文攻击(CCA)是指攻击者可以选择密文进行解密，除了知道已知明文攻击的基础上，攻击者可以任意制造或选择一些密文，并得到解密的明文，是一种比已知明文攻击更强的攻击方式。
若一个密码系统能抵抗选择密文攻击，那必然能够抵抗COA和KPA攻击。密码分析者的目标是推出密钥，CCA主要应用于分析公钥密钥体制。
简单理解：知道密文就知道明文，目标为推出密钥。 当密码系统只有承受住选择明文攻击(CPA)和选择密文攻击(CCA)，才能算是安全的。 其中，四种攻击方式对应的攻击强度为：
攻击难度：选择密文攻击(CCA)＞选择明文攻击(CPA)＞已知明文攻击(KPA)＞唯密文攻击(COA) 难易程度：选择密文攻击(CCA)＜选择明文攻击(CPA)＜已知明文攻击(KPA)＜唯密文攻击(COA)
离散概率 异或性质 （1）交换律：$ A \oplus B = B \oplus A$
（2）结合律： $( A \oplus B ) \oplus C = A \oplus ( B \oplus C )$
（3）自反性：$ A \oplus B \oplus B = A $（由结合律可推：$ A \oplus B \oplus B = A \oplus ( B \oplus B ) = A \oplus 0 = A)$
Birthday Paradox 每个人生日都不相同的概率: $$ \bar{p}(n)=1 \cdot\left(1-\frac{1}{365}\right) \cdot\left(1-\frac{2}{365}\right) \cdots\left(1-\frac{n-1}{365}\right)=\frac{365}{365} \cdot \frac{364}{365} \cdot \frac{363}{365} \cdot \frac{362}{365} \cdots \frac{365-n+1}{365} $$ 阶乘形式为 $\frac{365 !}{365^n(365-n) !}$ 至少两人生日相同的概率就是这个结果的补 $$ p(n)=1-\bar{p}(n)=1-\frac{365 !}{365^n(365-n) !} $$
secure cipher perfect secrecy
For every probability distribution over $M$ and $K$, every plain-text $m_0, m_1 \in M$ and every cipher text $c \in C$, the following holds: $$ \operatorname{Pr}\left[C=c \mid M=m_0\right]=\operatorname{Pr}\left[C=c \mid M=m_1\right] $$ 此定义可被解释为，密文空间的概率分布独立于明文空间的概率分布</description>
    </item>
    
    <item>
      <title>通过修改 PE 装载 DLL 实验</title>
      <link>https://niceasiv.cn/posts/pe_dll/</link>
      <pubDate>Mon, 28 Nov 2022 18:16:09 +0000</pubDate>
      
      <guid>https://niceasiv.cn/posts/pe_dll/</guid>
      <description>参考课件 chap06.pdf 中“通过修改PE装载DLL”一节的内容，以及课本第 5.5节的 内容，实现对notepad.exe（修復並下載Notepad.exe）的修改，使得修改后的 notepad.exe 在双击运行时，能够自动隐式装载 MyDll3.dll，并进而 将一个网页下载到本地index.html 文件。
本上机作业的目的是让大家深入理解 PE 文件中的导入表、导入地址表等关键结构及相关的功能。
本实验所使用的notepad.exe 是 Windows 7系统（最好32位版）中的可执行程序，MyDll3.dll 也仅保证在 Windows 7下能正常工作，因此，建议在 Windows 7环境（可预先安装虚拟机）下进行修改。请在虚拟机中禁用所有杀毒软件，确保修改过程不会受到杀毒软件的干扰。保证虚拟机能联网，以便DLL装载后的网页下载动作能正常完成。 下载notepad.exe可能与课本中所描述的notepad.exe版本不一致，应主要参考课件中的修改流程。 使用PEview分析PE文件，使用HxD编辑器修改PE文件。 直接使用本书所附代码编译生成 MyDll3.dll。 PE文件静态注入 这里因为notepad一直注入不成功，换了个win7版本也不行，好像是安全策略的原因，就只好找另外一个textview.exe进行注入
代码是李承远老师的逆向工程核心原理当中的
// dllmain.cpp : 定义 DLL 应用程序的入口点。 #include &amp;#34;pch.h&amp;#34; #include &amp;#34;stdio.h&amp;#34; #include &amp;#34;windows.h&amp;#34; #include &amp;#34;shlobj.h&amp;#34; #include &amp;#34;Wininet.h&amp;#34; #include &amp;#34;tchar.h&amp;#34; #pragma comment(lib, &amp;#34;Wininet.lib&amp;#34;) #define DEF_BUF_SIZE (4096) #define DEF_URL L&amp;#34;http://www.baidu.com/index.html&amp;#34; #define DEF_INDEX_FILE L&amp;#34;index.html&amp;#34; HWND g_hWnd = NULL; #ifdef __cplusplus extern &amp;#34;C&amp;#34; { #endif // 导出函数，但是没有任何功能，仅仅保持dll文件的形式上完整。 __declspec(dllexport) void dummy() { return; } #ifdef __cplusplus } #endif //DownloadURL 下载 szURL 中指定网站的文件，并将其保存在 szFile 目录。 BOOL DownloadURL(LPCTSTR szURL, LPCTSTR szFile) { BOOL bRet = FALSE; HINTERNET hInternet = NULL, hURL = NULL; BYTE pBuf[DEF_BUF_SIZE] = { 0, }; DWORD dwBytesRead = 0; FILE* pFile = NULL; errno_t err = 0; hInternet = InternetOpen(L&amp;#34;ReverseCore&amp;#34;, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0); if (NULL == hInternet) { OutputDebugString(L&amp;#34;InternetOpen() failed!&amp;#34;); return FALSE; } hURL = InternetOpenUrl(hInternet, szURL, NULL, 0, INTERNET_FLAG_RELOAD, 0); if (NULL == hURL) { OutputDebugString(L&amp;#34;InternetOpenUrl() failed!</description>
    </item>
    
    <item>
      <title>KNN&amp;DBscan&amp;K-means实现</title>
      <link>https://niceasiv.cn/posts/cluster/</link>
      <pubDate>Tue, 22 Nov 2022 20:51:09 +0000</pubDate>
      
      <guid>https://niceasiv.cn/posts/cluster/</guid>
      <description>Python集成开发环境(IDE)
(1) Anaconda: https://www.continuum.io/ （推荐）
(2) IDLE: Python解释器默认工具
(3) PyCharm: https://www.jetbrains.com/pycharm/
(4) 实验数据集：Python的scikit-learn库中自带的鸢尾花数据集，可使用datasets.load_iris()载入。
需要描述清楚算法流程，包括加载数据、数据处理、创建模型，训练，预测，评估模型等。如果必须给出实现代码才能更好地说明问题时，也必须先有相关的文字叙述，然后才是代码，代码只是作为例证
鸢尾花数据集共收集了三类鸢尾花，即Setosa鸢尾花、Versicolour鸢尾花和Virginica鸢尾花，每一类鸢尾花收集了50条样本记录，共计150条。
数据集包括4个属性，分别为花萼的长、花萼的宽、花瓣的长和花瓣的宽。对花瓣我们可能比较熟悉，花萼是什么呢？花萼是花冠外面的绿色被叶，在花尚未开放时，保护着花蕾。四个属性的单位都是cm，属于数值变量，四个属性均不存在缺失值的情况，以下是各属性的一些统计值如下：
属性 最大值 最小值 均值 方差 萼长 7.9 4.3 5.84 0.83 萼宽 4.4 2.0 3.05 0.43 瓣长 6.9 1.0 3.76 1.76 瓣宽 2.5 0.1 1.20 0.76 KNN算法 算法原理 存在一个样本数据集合，也称为训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类对应的关系。输入没有标签的数据后，将新数据中的每个特征与样本集中数据对应的特征进行比较，提取出样本集中特征最相似数据（最近邻）的分类标签。一般来说，我们只选择样本数据集中前k个最相似的数据，这就是k近邻算法中k的出处，通常k是不大于20的整数。最后选择k个最相似数据中出现次数最多的分类作为新数据的分类。
基本概念 计算距离 常用到的距离计算公式如下：
欧几里得距离（欧氏距离）：
$d=\sqrt{(x_{1}-x_{2})^{2}+(y_{1}-y_{2})^{2}}$​
曼哈顿距离
闵可夫斯基距离
切比雪夫距离
马氏距离
余弦相似度
皮尔逊相关系数
汉明距离
寻找最近邻数据
将所有距离进行升序排序，确定K值，最近的K个邻居即距离最短的K个数据。 关于K值得选择问题：
K 值的选择会对算法的结果产生重大影响。 K值较小意味着只有与测试数据较近的训练实例才会对预测结果起作用，容易发生过拟合。 如果 K 值较大，优点是可以减少学习的估计误差，但缺点是学习的近似误差增大，这时与测试数据较远的训练实例也会对预测起作用，使预测发生错误。 在实际应用中，K 值一般选择一个较小的数值，通常采用交叉验证的方法来选择最优的 K 值。随着训练实例数目趋向于无穷和 K=1 时，误差率不会超过贝叶斯误差率的2倍，如果K也趋向于无穷，则误差率趋向于贝叶斯误差率。（贝叶斯误差可以理解为最小误差） 三种交叉验证方法：
Hold-Out： 随机从最初的样本中选出部分，形成交叉验证数据，而剩余的就当做训练数据。 一般来说，少于原本样本三分之一的数据被选做验证数据。常识来说，Holdout 验证并非一种交叉验证，因为数据并没有交叉使用。 K-foldcross-validation：K折交叉验证，初始采样分割成K个子样本，一个单独的子样本被保留作为验证模型的数据，其他K-1个样本用来训练。交叉验证重复K次，每个子样本验证一次，平均K次的结果或者使用其它结合方式，最终得到一个单一估测。这个方法的优势在于，同时重复运用随机产生的子样本进行训练和验证，每次的结果验证一次，10折交叉验证是最常用的。 Leave-One-Out Cross Validation：正如名称所建议， 留一验证(LOOCV)意指只使用原本样本中的一项来当做验证资料， 而剩余的则留下来当做训练资料。 这个步骤一直持续到每个样本都被当做一次验证资料。 事实上，这等同于 K-fold 交叉验证是一样的，其中K为原本样本个数。 决策分类
明确K个邻居中所有数据类别的个数，将测试数据划分给个数最多的那一类。即由输入实例的 K 个最临近的训练实例中的多数类决定输入实例的类别。 最常用的两种决策规则：
多数表决法：多数表决法和我们日常生活中的投票表决是一样的，少数服从多数，是最常用的一种方法。 加权表决法：有些情况下会使用到加权表决法，比如投票的时候裁判投票的权重更大，而一般人的权重较小。所以在数据之间有权重的情况下，一般采用加权表决法。 说明：KNN没有显示的训练过程，它是“懒惰学习”的代表，它在训练阶段只是把数据保存下来，训练时间开销为0，等收到测试样本后进行处理。
​	1）计算待分类点与已知类别的点之间的距离
​	2）按照距离递增次序排序
​	3）选取与待分类点距离最小的K个点
​	4）确定前K个点所在类别的出现次数
​	5）返回前K个点出现次数最高的类别作为待分类点的预测分类
代码实现 初始化数据集 初始化训练集和测试集。训练集一般为两类或者多种类别的数据；测试集一般为一个数据。
iris = load_iris() data = iris.data label = iris.target # 划分训练集和测试集 train_set, test_set, train_label, test_label = train_test_split(data, label, test_size=0.2) 数据处理 归一化处理
train_set = (train_set - train_set.min(*axis*=0)) / (train_set.max(*axis*=0) - train_set.min(*axis*=0)) test_set = (test_set - test_set.</description>
    </item>
    
    <item>
      <title>RSA 加密体制破译</title>
      <link>https://niceasiv.cn/posts/rsaattack/</link>
      <pubDate>Tue, 01 Nov 2022 18:16:09 +0000</pubDate>
      
      <guid>https://niceasiv.cn/posts/rsaattack/</guid>
      <description>题目摘要 赛题名称： RSA 加密体制破译 赛题描述 RSA密码算法是使用最为广泛的公钥密码体制。该体制简单且易于实现，只需要选择5个参数即可（两个素数$𝑝$和$𝑞$、模数$𝑁=𝑝𝑞$、加密指数$𝑒$和解密指数$𝑑$。设𝑚为待加密消息RSA体制破译相当于已知$𝑚^𝑒$ $mod$ $𝑁$能否还原𝑚的数论问题。目前模数规模为1024比特的RSA算法一般情况下是安全的，但是如果参数选取不当，同样存在被破译的可能。有人制作了一个RSA加解密软件采用的RSA体制的参数特点描述见密码背景部分）。
已知该软件发送某个明文的所有参数和加密过程的全部数据（加密案例文件详见附件3-1。Alice使用该软件发送了一个通关密语，且所有加密数据已经被截获，请问能否仅从加密数据恢复该通关密语及RSA体制参数？如能请给出原文和参数，如不能请给出已恢复部分并说明剩余部分不能恢复的理由？
加密过程 原始明文 This is a test of my RSA system. Frame0
rame1
rame2
rame3
BA645145D9DE58B0FFA6FC4624A2815092D2A2DC405E7A2515F985727D3C52F479A4D04694568CA9B08391BE79BD122808CF6034AB7251088687BFF5916A4F4723FE1372DCF9B069CAB269A9F8F47CB50078D3279B9452C9B3B65A07B49C793783EDB8EB8D8F1A220D9EFED33147483103A2551A96932738255493F13B51195300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100018805A937DABF25FE760F9F398C7D9D5955EF7468FEC89119F8DD69874FB009AB2C424BD6A8E85401C4CD130B48D0490586DFBD81C8154EDCEFC3AFC4F80338432197EB059AB54CF109B231416FB65E2F9BE4F01D455E25486D8E155A5874E8A910E8C65F73ACD953D316B35A148D5AC5834D86F66AD415EBA38AD3908B32780A 2.过程及参数
RSA 密码算法描述如下，包含体制参数选取和加解密过程。
1）RSA 体制参数选取
​ Step1.每个使用者，任意选择两个大素数$𝑝$和$𝑞$，并求出其乘积$𝑁=𝑝𝑞$。
​ Step2.令$𝜑(𝑁)=(𝑝−1)(𝑞−1)$选择整数$𝑒$，使得$GCD(𝑒,𝜑(𝑁))=1$，并求出$𝑒$模 $𝜑(𝑁)$的逆元$𝑑$，即$𝑒𝑑≡1 mod (𝜑(𝑁))$
​ Step3.将数对$(𝑒,𝑁)$公布为公钥，$𝑑$保存为私钥。
2）加解密过程
​ Bob欲传递明文𝑚给 Alice，则Bob首先由公开途径找出 Alice 的公钥 $(𝑒,𝑁)$，Bob 计算加密的信息$𝑐$为:$𝑐 ≡ 𝑚^𝑒$ $mod$ $𝑁$。
​ Bob 将密文$𝑐$传送给 Alice。 随后 Alice 利用自己的私钥$𝑑$解密： ​ $𝑐^e ≡ (𝑚^𝑒)^𝑑 ≡ 𝑚^{𝑒𝑑}≡ 𝑚\space mod\space 𝑁$
Alice 使用的 RSA 密码体制有以下事项需要说明：
​	1）模数𝑁=𝑝𝑞规模为1024比特，其中𝑝，𝑞为素数；
​	2）素数𝑝由某一随机数发生器生成；
​	3）素数𝑞可以随机选择，也可以由2）中的随机数发生器产生；
​	4）可以对文本加密，每次加密最多8个明文字符；
​	5）明文超过8个字符时，对明文分片，每个分片不超过8个字符；
​	6）分片==明文填充为512比特消息后再进行加密，填充规则为高位添加64比特标志位，随后加上32比特通信序号==，再添加若干个0，最后64比特为明文分片字符对应的ASCII码（**注：填充方式参见加密案例，但注意每次通信的标志位可能变化）
​	7）分片加密后发送一个加密帧数据，帧数据文件名称为FrameXX，其中XX表示接收序号，该序号不一定等于通信序号；
​	8）帧数据的数据格式如下，其中数据都是16进制表示，结构如下==1024bit模数N | 1024bit加密指数e | 1024bit密文== $m^e\space mod \space N$。
​	9）由于Alice初次使用该软件，可能会重复发送某一明文分片。
符号说明： n 模数、p 素数、q素数、e加密指数、d 解密指数、m 明文分片、c 密文分片、“0X”十六进制数据表示
明文： &amp;ldquo;This is a test of my RSA system.&amp;ldquo;将其分割为4个8字符长度消息(注意：空格也是一个字符)
This is 该8字符对应的ASCII为	54	68	69	73	20	69	73	20	将其视为64比特整数为==&amp;gt;	0X5468697320697320 a test o	该8字符对应的ASCII为	61	20	74	65	73	74	20	6F	将其视为64比特整数为==&amp;gt;	0X612074657374206F f my RSA	该8字符对应的ASCII为	66	20	6D	79	20	52	53	41	将其视为64比特整数为==&amp;gt;	0X66206D7920525341 system.</description>
    </item>
    
    <item>
      <title>Week 6 - Programming Assignment</title>
      <link>https://niceasiv.cn/posts/week6-quiz/</link>
      <pubDate>Mon, 31 Oct 2022 18:16:09 +0000</pubDate>
      
      <guid>https://niceasiv.cn/posts/week6-quiz/</guid>
      <description>Content 更好的效果PDF:pdf文章列表 | Asiv&amp;rsquo;s Blog (niceasiv.cn)
Factoring challenge #1: Your goal in this project is to break RSA when the public modulus $N$ is generated incorrectly. This should serve as yet another reminder not to implement crypto primitives yourself.
Normally, the primes that comprise an RSA modulus are generated independently of one another. But suppose a developer decides to generate the first prime $p$ by choosing a random number $R$ and scanning for a prime close by. The second prime $q$ is generated by scanning for some other random prime also close to $R$. We show that the resulting RSA modulus $N=p q$ can be easily factored.
在公开的N没有被正确的生成时破解RSA。通常在RSA中构成模数N的素数q和p,应该独立生成。如果开发者使用一个随机数R,并选择R附近的两个素数作为q和p，那么这种情况情况下生成的RSA模数N就很容易被破解。
Suppose you are given a composite(合数) $N$ and are told that $N$ is a product of two relatively close primes $p$ and $q$, namely $p$ and $q$ satisfy $$ |p-q|&amp;lt;2 N^{1 / 4} $$ Your goal is to factor $N$.</description>
    </item>
    
    <item>
      <title>CVE2020-06-01复现</title>
      <link>https://niceasiv.cn/posts/cve20200601/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceasiv.cn/posts/cve20200601/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python复习</title>
      <link>https://niceasiv.cn/posts/pythonnote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceasiv.cn/posts/pythonnote/</guid>
      <description>数据类型 字符串类 删除空白
rstrip 删除右边空格
lstrip 删除左边空格
strip 删除两边空格
In [1]: str=&amp;#34; python &amp;#34; In [2]: str.rstrip() Out[2]: &amp;#39; python&amp;#39; In [3]: str.lstrip() Out[3]: &amp;#39;python &amp;#39; In [4]: str.strip() Out[4]: &amp;#39;python&amp;#39; 列表 列表的索引从0开始
元素添加和删除 1.在列表末尾添加元素
In [5]: bicycles = [&amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;] In [6]: bicycles[1] Out[6]: &amp;#39;cannondale&amp;#39; In [7]: bicycles.append(&amp;#34;app&amp;#34;) In [8]: bicycles Out[8]: [&amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;, &amp;#39;app&amp;#39;] 2.在列表任意位置插入元素
In [9]: bicycles.insert(0,&amp;#34;app&amp;#34;) In [10]: bicycles Out[10]: [&amp;#39;app&amp;#39;, &amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;, &amp;#39;app&amp;#39;] 3.从列表末尾或任意位置删除元素
pop()会返回弹出的元素
In [11]: bicycles.pop() Out[11]: &amp;#39;app&amp;#39; In [12]: bicycles Out[12]: [&amp;#39;app&amp;#39;, &amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;] In [14]: bicycles Out[14]: [&amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;] In [15]: bicycles.pop(0) Out[15]: &amp;#39;trek&amp;#39; 4.从列表删除任意位置元素
In [12]: bicycles Out[12]: [&amp;#39;app&amp;#39;, &amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;] In [13]: del bicycles[0] In [14]: bicycles Out[14]: [&amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;] 5.删除指定值
remove()
In [18]: bicycles Out[18]: [&amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;specialized&amp;#39;] In [19]: bicycles.remove(&amp;#39;redline&amp;#39;) In [20]: bicycles Out[20]: [&amp;#39;cannondale&amp;#39;, &amp;#39;specialized&amp;#39;] 元素排序 1.</description>
    </item>
    
  </channel>
</rss>
