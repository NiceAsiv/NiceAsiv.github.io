<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Asiv&#39;s Blog</title>
  
  <subtitle>Nice Asiv</subtitle>
  <link href="http://niceasiv.cn/atom.xml" rel="self"/>
  
  <link href="http://niceasiv.cn/"/>
  <updated>2023-04-29T15:53:08.118Z</updated>
  <id>http://niceasiv.cn/</id>
  
  <author>
    <name>Asiv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE2020-06-01复现</title>
    <link href="http://niceasiv.cn/2023/03/29/CVE20200601/"/>
    <id>http://niceasiv.cn/2023/03/29/CVE20200601/</id>
    <published>2023-03-29T10:16:09.000Z</published>
    <updated>2023-04-29T15:53:08.118Z</updated>
    
    
    
    
    <category term="course" scheme="http://niceasiv.cn/categories/course/"/>
    
    
    <category term="Reverse" scheme="http://niceasiv.cn/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Python复习</title>
    <link href="http://niceasiv.cn/2023/03/10/pythonNote/"/>
    <id>http://niceasiv.cn/2023/03/10/pythonNote/</id>
    <published>2023-03-10T10:16:09.000Z</published>
    <updated>2023-03-28T06:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h3><p><code>删除空白</code></p><p><code>rstrip</code> 删除右边空格</p><p><code>lstrip</code> 删除左边空格</p><p><code>strip</code> 删除两边空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="built_in">str</span>=<span class="string">&quot; python &quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">str</span>.rstrip()</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27; python&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">str</span>.lstrip()</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">&#x27;python &#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">str</span>.strip()</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表的索引从0开始</p><h4 id="元素添加和删除"><a href="#元素添加和删除" class="headerlink" title="元素添加和删除"></a>元素添加和删除</h4><p>1.在列表末尾添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line">In [<span class="number">6</span>]: bicycles[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;cannondale&#x27;</span></span><br><span class="line">In [<span class="number">7</span>]: bicycles.append(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">In [<span class="number">8</span>]: bicycles</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>, <span class="string">&#x27;app&#x27;</span>]</span><br></pre></td></tr></table></figure><p>2.在列表任意位置插入元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: bicycles.insert(<span class="number">0</span>,<span class="string">&quot;app&quot;</span>)</span><br><span class="line">In [<span class="number">10</span>]: bicycles</span><br><span class="line">Out[<span class="number">10</span>]: [<span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>, <span class="string">&#x27;app&#x27;</span>]</span><br></pre></td></tr></table></figure><p>3.从列表末尾或任意位置删除元素</p><p><code>pop()会返回弹出的元素</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: bicycles.pop()</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">&#x27;app&#x27;</span></span><br><span class="line">In [<span class="number">12</span>]: bicycles</span><br><span class="line">Out[<span class="number">12</span>]: [<span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: bicycles</span><br><span class="line">Out[<span class="number">14</span>]: [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line">In [<span class="number">15</span>]: bicycles.pop(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">&#x27;trek&#x27;</span></span><br></pre></td></tr></table></figure><p>4.从列表删除任意位置元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: bicycles</span><br><span class="line">Out[<span class="number">12</span>]: [<span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line">In [<span class="number">13</span>]: <span class="keyword">del</span> bicycles[<span class="number">0</span>]</span><br><span class="line">In [<span class="number">14</span>]: bicycles</span><br><span class="line">Out[<span class="number">14</span>]: [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br></pre></td></tr></table></figure><p>5.删除指定值</p><p><code>remove()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: bicycles</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line">In [<span class="number">19</span>]: bicycles.remove(<span class="string">&#x27;redline&#x27;</span>)</span><br><span class="line">In [<span class="number">20</span>]: bicycles</span><br><span class="line">Out[<span class="number">20</span>]: [<span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="元素排序"><a href="#元素排序" class="headerlink" title="元素排序"></a>元素排序</h4><p>1.<code>sort(*, key=None, reverse=False)</code>永久性排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: num=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">In [<span class="number">27</span>]: num.sort()</span><br><span class="line">In [<span class="number">28</span>]: num</span><br><span class="line">Out[<span class="number">28</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>2.<code>sorted(iterable, /, *, key=None, reverse=False)</code>暂时性排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: app=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">sorted</span>(app)</span><br><span class="line">Out[<span class="number">2</span>]: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h4><p>列表解析</p><p>要使用这种语法，首先指定一个描述性的列表名；然后，指定一个左方括号， 并定义一个表达式，用于生成你要存储到列表中的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: values=[_**<span class="number">2</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: values</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t1=values</span><br><span class="line">t2=values[:]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: t1</span><br><span class="line">Out[<span class="number">16</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: t2</span><br><span class="line">Out[<span class="number">17</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: values[<span class="number">2</span>]=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: t1</span><br><span class="line">Out[<span class="number">19</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: t2</span><br><span class="line">Out[<span class="number">20</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组其实跟列表差不多，也是存一组数，只不是它一旦创建，便不能再修改，所以又叫只读列表</p><p>元组使用小括号，列表使用方括号</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可</p><p>用途：一般情况下用于自己写的程序能存下数据，但是又希望这些数据不会被改变，比如：数据库连接信息等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">12</span>, <span class="number">34.56</span>);</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup3 = tup1 + tup2;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (tup3)</span><br><span class="line">(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>虽然不能修改元组的元素，但是可以给存储元组的变量赋值</p></blockquote><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>删除键值对</p><p><code>del() </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: dic</span><br><span class="line">Out[<span class="number">25</span>]: &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="keyword">del</span> dic[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: dic</span><br><span class="line">Out[<span class="number">27</span>]: &#123;&#125;</span><br></pre></td></tr></table></figure><p>遍历字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: <span class="keyword">for</span> name,value <span class="keyword">in</span> dic.items():</span><br><span class="line">    ...:     <span class="built_in">print</span>(name)</span><br><span class="line">    ...:</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: <span class="keyword">for</span> name,value <span class="keyword">in</span> dic.items():</span><br><span class="line">    ...:     <span class="built_in">print</span>(value)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: <span class="keyword">for</span> _ <span class="keyword">in</span> dic.items():</span><br><span class="line">    ...:     <span class="built_in">print</span>(_)</span><br><span class="line">    ...:</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h3><p>位置实参</p><blockquote><p>调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此， 最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"> </span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>) </span><br></pre></td></tr></table></figure><p><code>位置实参的顺序对函数的运行很重要</code></p><h3 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h3><p>关键字实参是传递给函数的名称—值对。你直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"> </span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Q:让实参变为可选</strong></p><p><code>可给实参指定一个默认值——空字符串</code></p><p>传递任意数量的实参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>): </span><br><span class="line">  <span class="string">&quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot;</span> </span><br><span class="line">  <span class="built_in">print</span>(toppings) </span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>) </span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>) </span><br></pre></td></tr></table></figure><p>形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中。</p><h2 id="面向对象OOP"><a href="#面向对象OOP" class="headerlink" title="面向对象OOP"></a>面向对象OOP</h2><p>根据约定，在Python中首字母大写的是类</p><p>使用<code>isinstance</code>来测试一个对象是否为某个类的实例</p><p>方法<code>__init__</code>初始化方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A simple attempt to model a dog.&#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; is now sitting.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">my_dog=Dog(<span class="string">&#x27;willie&#x27;</span>,<span class="number">6</span>)</span><br><span class="line">my_dog.sit()</span><br></pre></td></tr></table></figure><p>每个与类相关联的方法 调用都自动传递实参<code>self</code>，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</p><p>我们将通过实参向Dog()传递名字和 年龄；self会自动传递，因此我们不需要传递它。每当我们根据Dog类创建实例时，都只需给最 后两个形参（name和age）提供值。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(): </span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): </span><br><span class="line"> <span class="string">&quot;&quot;&quot;Represent aspects of a car, specific to electric vehicles.&quot;&quot;&quot;</span> </span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line"> <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string"> 电动汽车的独特之处</span></span><br><span class="line"><span class="string"> 初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span> </span><br><span class="line"> <span class="built_in">super</span>(ElectricCar,self).__init__(make, model, year) <span class="comment">#初始化父类方法</span></span><br><span class="line">    self.battery_size = <span class="number">70</span></span><br></pre></td></tr></table></figure><p>重写父类方法</p><p>直接定义覆盖父类的函数即可,Python将忽略父类中的同名方法</p><p>todo :列表推导式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;字符串类&quot;&gt;&lt;a href=&quot;#字符串类&quot; class=&quot;headerlink&quot; title=&quot;字符串类&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="course" scheme="http://niceasiv.cn/categories/course/"/>
    
    
    <category term="Python" scheme="http://niceasiv.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>强化学习笔记</title>
    <link href="http://niceasiv.cn/2023/03/04/reinforment_learning/"/>
    <id>http://niceasiv.cn/2023/03/04/reinforment_learning/</id>
    <published>2023-03-04T09:06:09.000Z</published>
    <updated>2023-04-29T15:44:18.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="马尔科夫决策-MDP"><a href="#马尔科夫决策-MDP" class="headerlink" title="马尔科夫决策(MDP)"></a>马尔科夫决策(MDP)</h3><p>在随机过程中某时刻$t$的状态用$S_t$表示，所以可能的状态组成了状态空间$S$。</p><p>如果已知历史的状态信息即$(S_1,…,S_t)$,那么下一个时刻状态为$S_{t+1}$的概率为$P(S_{t+1}\mid S_1,…,S_t)$</p><p>当且仅当某时刻的状态只取决于上一时刻的状态时，一个随机过程被称为具有<code>马尔可夫性质</code></p><p>$$<br>P(S_{t+1}\mid S_t)&#x3D;P(S_{t+1}\mid S_1,…,S_t)<br>$$<br>也就是说当前状态是未来的充分统计量，即下一个状态只取决于当前状态，而不会受到过去状态的影响。</p><p><code>注意</code>：</p><p>虽然$t+1$时刻的状态只与$t$时刻的状态有关，但是$t$时刻的状态其实包含了$t-1$时刻的状态的信息，通过这种链式的关系，<strong>历史的信息被传递到了现在。</strong></p><h4 id="Markov-process"><a href="#Markov-process" class="headerlink" title="Markov process"></a>Markov process</h4><p>通常用两元组$&lt;S,P&gt;$描述一个马尔科夫过程，其中$S$是有限状态集合，$P$是状态转移矩阵</p><p>矩阵$P$中第$i$行第$j$列$P(s_j|s_i)$表示状态$s_i$转移到状态$s_j$的概率，从某个状态出发，到达其他状态的概率和必须为1，即状态转移矩阵的每一行的和为1。</p><p><img src="https://cdn.niceasiv.cn/202303131435145.png" alt="img"></p><p>给定一个马尔可夫过程，我们就可以从某个状态出发，根据它的状态转移矩阵生成一个状态<strong>序列</strong>（episode），这个步骤也被叫做<strong>采样</strong>（sampling）。</p><h4 id="Markov-reward-process-MRP"><a href="#Markov-reward-process-MRP" class="headerlink" title="Markov reward process(MRP)"></a>Markov reward process(MRP)</h4><p>一个马尔科夫奖励过程由$\langle \mathcal{S},\mathcal{P},r,\gamma \rangle$</p><ul><li>$\mathcal{S}$ 是有限状态的集合。</li><li>$\mathcal{P}$ 是状态转移矩阵。</li><li>$r$是奖励函数,某个状态$s$的奖励$r(s)$指转移到该状态时可以获得奖励的期望。</li><li>$\gamma$ 是折扣因子,$\gamma$的取值为$[0,1)$ 。引入折扣因子的理由为远期利益具有一定不确定性，有时我们更希望能够尽快获得一些奖励，所以我们需要对远期利益打一些折扣。接近 1 的 $\gamma$ 更关注长期的累计奖励，接近0的$\gamma$ 更考虑短期奖励。</li></ul><h4 id="奖励函数的本质-向智能体传达目标-MDP"><a href="#奖励函数的本质-向智能体传达目标-MDP" class="headerlink" title="奖励函数的本质:向智能体传达目标(MDP)"></a>奖励函数的本质:向智能体传达目标(MDP)</h4><p>强化学习的标准交互过程如下：每个时刻，智能体根据根据其 <code>策略(policy)</code>，在当前所处 <code>状态(state)</code> 选择一个 <code>动作(action)</code>，<code>环境(environment)</code> 对这些动作做出相应的相应的响应，转移到新状态，同时产生一个 <code>奖励信号 (reward)</code>，这通常是一个数值，奖励的折扣累加和称为 <code>收益/回报 (return)</code>，是智能体在动作选择过程中想要最大化的目标</p><p><img src="https://cdn.niceasiv.cn/202303141055151.webp" alt="强化学习交互图"></p><ul><li><strong>“奖励 &amp; 收益” 其实是智能体目标的一种形式化、数值化的表征</strong>。可以把这种想法非正式地表述为 “收益假设”</li><li>收益是通过奖励信号计算的，而奖励函数是我们提供的，<strong>奖励函数起到了人与算法沟通的桥梁作用</strong></li><li>需要注意的是，智能体只会学习如何最大化收益，如果想让它完成某些指定任务，就<strong>必须保证我们设计的奖励函数可以使得智能体最大化收益的同时也能实现我们的目标</strong></li></ul><h4 id="回报"><a href="#回报" class="headerlink" title="回报"></a>回报</h4><p>在一个马尔可夫奖励过程中，从第$t$时刻状态$S_t$开始，直到终止状态时，所有奖励的衰减之和称为<strong>回报</strong>（Return）</p><p>假设设置$\gamma &#x3D;0.5$</p><p><img src="https://cdn.niceasiv.cn/202303131455336.png" alt="img"><br>$$<br>G_t&#x3D;R_t+\gamma R_{t+1}+\gamma^2 R_{t+2}+\cdots&#x3D;\sum_{k&#x3D;0}^{\infty} \gamma^k R_{t+k}<br>$$<br>假设路径为1,2,3,6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#概率转移矩阵</span></span><br><span class="line">P=[</span><br><span class="line">    [<span class="number">0.9</span>,<span class="number">0.1</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>],</span><br><span class="line">    [<span class="number">0.5</span>,<span class="number">0.0</span>,<span class="number">0.5</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>],</span><br><span class="line">    [<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.6</span>,<span class="number">0.0</span>,<span class="number">0.4</span>],</span><br><span class="line">    [<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.3</span>,<span class="number">0.7</span>],</span><br><span class="line">    [<span class="number">0.0</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.5</span>,<span class="number">0.0</span>,<span class="number">0.0</span>],</span><br><span class="line">    [<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.6</span>,<span class="number">0.0</span>,<span class="number">1.0</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">P=np.array(P)</span><br><span class="line">rewards=[-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">2</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">gamma=<span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_chain_reward</span>(<span class="params">start_index,chain,gamma</span>):</span><br><span class="line">    reward=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain)):</span><br><span class="line">        reward=gamma*reward+rewards[chain[i]-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> reward</span><br><span class="line"></span><br><span class="line">chain=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">start_index=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">reward=compute_chain_reward(start_index,chain,gamma)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reward)</span><br></pre></td></tr></table></figure><h4 id="状态价值函数"><a href="#状态价值函数" class="headerlink" title="状态价值函数"></a>状态价值函数</h4><p>一个状态的期望回报(即从这个状态出发的未来累积奖励的期望)-&gt;价值</p><p>即其状态价值函数$V_{\pi}(s)$就等于转移到每个通路上的概率（由策略决定）乘以每条路上得到的回报即</p><p>$V(s)&#x3D;\mathbb{E}\left[G_t \mid S_t&#x3D;s\right]$ </p><p>展开为:<br>$$<br>\begin{align}<br>V(s) &amp;&#x3D;\mathbb{E}[G_t \mid S_t&#x3D;s] \<br>     &amp;&#x3D;\mathbb{E}[R_t+\gamma R_{t+1}+\gamma^2 R_{t+2}+…\mid S_t&#x3D;s]\<br>     &amp;&#x3D;\mathbb{E}[R_t+\gamma(R_{t+1}+\gamma R_{t+2})+… \mid S_t&#x3D;s]\<br>     &amp;&#x3D;\mathbb{E}[R_t+\gamma G_{t+1}\mid S_t&#x3D;s]\<br>     &amp;&#x3D;\mathbb{E}[R_t+\gamma V(S_{t+1})\mid S_t&#x3D;s]\<br>\end{align}<br>$$<br>一方面,即时奖励的期望正是奖励函数的输出，即：</p><p> $\mathbb{E}\left[R_t \mid S_t&#x3D;s\right]&#x3D;r(s)$</p><p>另一方面，等式中剩余部分 $\mathbb{E}\left[\gamma V\left(S_{t+1}\right) \mid S_t&#x3D;s\right]$ 可以根据从状态$s$出发的转移概率得到，即可以得到<br>$$<br>V(s)&#x3D;r(s)+\gamma\sum_{s^{\prime} \in S }{p(s^{\prime} \mid s)V(s^\prime)}<br>$$<br>上式就是马尔可夫奖励过程中非常有名的贝尔曼方程 (Bellman equation)，对每一个状态都成立。</p><p><img src="https://cdn.niceasiv.cn/202303141138303.jpeg" alt="img"></p><p>上式就是马尔可夫奖励过程中非常有名的贝尔曼方程 (Bellman equation)，对每一个状态都成立。</p><p>若一个马尔可夫奖励过程一共有 $n$ 个状 态，即 $\mathcal{S}&#x3D;\left{s_1, s_2, \ldots, s_n\right}$ ，我们将所有状态的价值表示成一个列向量 $\mathcal{V}&#x3D;\left[V\left(s_1\right), V\left(s_2\right), \ldots, V\left(s_n\right)\right]^T$ ，同理，将奖励函数写成一个列向量 $\mathcal{R}&#x3D;\left[r\left(s_1\right), r\left(s_2\right), \ldots, r\left(s_n\right)\right]^T$ 。于是我们可以将贝尔曼方程写成矩阵的形式:<br>$$<br>\begin{gathered}<br>\mathcal{V}&#x3D;\mathcal{R}+\gamma \mathcal{P} \mathcal{V} \<br>{\left[\begin{array}{c}<br>V\left(s_1\right) \<br>V\left(s_2\right) \<br>\ldots \<br>V\left(s_n\right)<br>\end{array}\right]&#x3D;\left[\begin{array}{c}<br>r\left(s_1\right) \<br>r\left(s_2\right) \<br>\ldots \<br>r\left(s_n\right)<br>\end{array}\right]+\gamma\left[\begin{array}{cccc}<br>P\left(s_1 \mid s_1\right) &amp; p\left(s_2 \mid s_1\right) &amp; \ldots &amp; P\left(s_n \mid s_1\right) \<br>P\left(s_1 \mid s_2\right) &amp; P\left(s_2 \mid s_2\right) &amp; \ldots &amp; P\left(s_n \mid s_2\right) \<br>\ldots &amp; &amp; &amp; \<br>P\left(s_1 \mid s_n\right) &amp; P\left(s_2 \mid s_n\right) &amp; \ldots &amp; P\left(s_n \mid s_n\right)<br>\end{array}\right]\left[\begin{array}{c}<br>V\left(s_1\right) \<br>V\left(s_2\right) \<br>\ldots \<br>V\left(s_n\right)<br>\end{array}\right]}<br>\end{gathered}<br>$$<br>我们可以直接根据矩阵运算求解，得到以下解析解:<br>$$<br>\begin{aligned}<br>\mathcal{V} &amp; &#x3D;\mathcal{R}+\gamma \mathcal{P} \mathcal{V} \<br>(I-\gamma \mathcal{P}) \mathcal{V} &amp; &#x3D;\mathcal{R} \<br>\mathcal{V} &amp; &#x3D;(I-\gamma \mathcal{P})^{-1} \mathcal{R}<br>\end{aligned}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute_state_value</span>(<span class="params">P,rewards,gamma,states_num</span>):</span><br><span class="line">    rewards=np.array(rewards).reshape((-<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    value=np.dot(np.linalg.inv(np.eye(states_num)-gamma*P),rewards)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">state_value=compute_state_value(P,rewards,gamma,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(state_value)</span><br></pre></td></tr></table></figure><h4 id="动作价值函数"><a href="#动作价值函数" class="headerlink" title="动作价值函数"></a>动作价值函数</h4><p>我们用 $Q^\pi(s, a)$ 表示在 MDP 遵循策略 $\pi$ 时，对当前状态 $s$ 执行动作 $a$ 得到的期望回报:<br>$$<br>Q^\pi(s, a)&#x3D;\mathbb{E}<em>\pi\left[G_t \mid S_t&#x3D;s, A_t&#x3D;a\right]<br>$$<br>状态价值函数和动作价值函数之间的关系：在使用策略 $\pi$ 中，状态 $s$ 的价值等于在该状态下基于策略 $\pi$ 采取所有动作的概率与相应的价值相乘 再求和的结果:<br>$$<br>V^\pi(s)&#x3D;\sum</em>{a \in A} \pi(a \mid s) Q^\pi(s, a)<br>$$<br>使用策略 $\pi$ 时，状态 $s$ 下采取动作 $a$ 的价值等于即时奖励加上经过衰减后的所有可能的下一个状态的状态转移概率与相应的价值的乘积:<br>$$<br>Q^\pi(s, a)&#x3D;r(s, a)+\gamma \sum_{s^{\prime} \in S} P\left(s^{\prime} \mid s, a\right) V^\pi\left(s^{\prime}\right)<br>$$</p><h4 id="贝尔曼期望方程"><a href="#贝尔曼期望方程" class="headerlink" title="贝尔曼期望方程"></a>贝尔曼期望方程</h4><p>$$<br>\begin{aligned}<br>V^\pi(s) &amp; &#x3D;\mathbb{E}<em>\pi\left[R_t+\gamma V^\pi\left(S</em>{t+1}\right) \mid S_t&#x3D;s\right] \<br>&amp; &#x3D;\sum_{a \in A} \pi(a \mid s)\left(r(s, a)+\gamma \sum_{s^{\prime} \in S} p\left(s^{\prime} \mid s, a\right) V^\pi\left(s^{\prime}\right)\right) \<br>\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}<br>Q^\pi(s, a) &amp; &#x3D;\mathbb{E}<em>\pi\left[R_t+\gamma Q^\pi\left(S</em>{t+1}, A_{t+1}\right) \mid S_t&#x3D;s, A_t&#x3D;a\right] \<br>&amp; &#x3D;r(s, a)+\gamma \sum_{s^{\prime} \in S} p\left(s^{\prime} \mid s, a\right) \sum_{a^{\prime} \in A} \pi\left(a^{\prime} \mid s^{\prime}\right) Q^\pi\left(s^{\prime}, a^{\prime}\right)<br>\end{aligned}<br>$$</p><h4 id="MDP"><a href="#MDP" class="headerlink" title="MDP"></a>MDP</h4><p>$\langle \mathcal{S},\mathcal{A},P,r,\gamma \rangle$</p><ul><li><p>$\mathcal{S}$是状态集合</p></li><li><p>$\mathcal{A}$ 是动作的集合；</p></li><li><p>$\gamma$ 是折扣因子;</p></li><li><p>$r(s, a)$ 是奖励函数，此时奖励可以同时取决于状态 $s$ 和动作 $a$ ，在奖励函数 只取决于状态 $s$ 时，则退化为 $r(s)$ ；</p></li><li><p>$P\left(s^{\prime} \mid s, a\right)$ 是状态转移函数，表示在状态 $s$ 执行动作 $a$ 之后到达状态 $s^{\prime}$ 的概 率。</p></li></ul><p><img src="https://cdn.niceasiv.cn/202303141055151.webp" alt="强化学习交互图"></p><p><img src="https://cdn.niceasiv.cn/202303151058328.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mdp过程</span></span><br><span class="line">state=[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="string">&#x27;s4&#x27;</span>,<span class="string">&#x27;s5&#x27;</span>,<span class="string">&#x27;s6&#x27;</span>]</span><br><span class="line">action=[<span class="string">&#x27;s1-&gt;s1&#x27;</span>,<span class="string">&#x27;s1-&gt;s2&#x27;</span>,<span class="string">&#x27;s2-&gt;s1&#x27;</span>,<span class="string">&#x27;s2-&gt;s3&#x27;</span>,<span class="string">&#x27;s3-&gt;s4&#x27;</span>,<span class="string">&#x27;s3-&gt;s5&#x27;</span>,<span class="string">&#x27;s4-&gt;s5&#x27;</span>,<span class="string">&#x27;s4-&gt;s3&#x27;</span>,<span class="string">&#x27;s4-&gt;s4&#x27;</span>,<span class="string">&#x27;s4-&gt;s2&#x27;</span>]</span><br><span class="line"><span class="comment">#状态转移概率</span></span><br><span class="line">P=&#123;</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s1&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s2&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s1&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s3&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s4&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s5&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s5&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s3&#x27;</span>:<span class="number">0.2</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s4&#x27;</span>:<span class="number">0.4</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s2&#x27;</span>:<span class="number">0.2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#奖励函数</span></span><br><span class="line">rewards=&#123;</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s1&#x27;</span>:-<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s2&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s1&#x27;</span>:-<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s3&#x27;</span>:-<span class="number">2.0</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s4&#x27;</span>:-<span class="number">2.0</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s5&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s5&#x27;</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s3&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s4&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s2&#x27;</span>:<span class="number">1.0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gamma=<span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">MDP=(state,action,P,rewards,gamma)</span><br><span class="line"></span><br><span class="line"><span class="comment">#策略1 随机策略</span></span><br><span class="line">Pi_1=&#123;</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s1&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s2&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s1&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s3&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s4&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s5&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s5&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s4-s*&#x27;</span>:<span class="number">0.5</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#策略2</span></span><br><span class="line">Pi_2=&#123;</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s1&#x27;</span>:<span class="number">0.6</span>,</span><br><span class="line">    <span class="string">&#x27;s1-&gt;s2&#x27;</span>:<span class="number">0.4</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s1&#x27;</span>:<span class="number">0.3</span>,</span><br><span class="line">    <span class="string">&#x27;s2-&gt;s3&#x27;</span>:<span class="number">0.7</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s4&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s3-&gt;s5&#x27;</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s5&#x27;</span>:<span class="number">0.1</span>,</span><br><span class="line">    <span class="string">&#x27;s4-&gt;s*&#x27;</span>:<span class="number">0.9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何计算MDP下，一个策略$\pi$的状态价值函数</p><p>MDP-&gt;MRP</p><p>奖励函数<br>$$<br>r^\prime(s)&#x3D;\sum_{a \in \mathcal{A}}\pi(a \mid s)r(s,a)<br>$$</p><p>状态转移<br>$$<br>P^\prime(s^\prime|s)&#x3D;\sum_{a \in \mathcal{A}}{\pi(a \mid s)P(s^\prime \mid s,a)}<br>$$</p><h4 id="Monte-Carlo"><a href="#Monte-Carlo" class="headerlink" title="Monte Carlo"></a>Monte Carlo</h4><p>$$<br>V^\pi(s)&#x3D;\mathbb{E}<em>\pi\left[G_t \mid S_t&#x3D;s\right] \approx \frac{1}{N} \sum</em>{i&#x3D;1}^N G_t^{(i)}<br>$$</p><p><code>步骤</code>:</p><ol><li>使用策略 $\pi$ 采样若干条序列:<br>$$<br>s_0^{(i)} \stackrel{a_0^{(i)}}{\longrightarrow} r_0^{(i)}, s_1^{(i)} \stackrel{a_1^{(i)}}{\longrightarrow} r_1^{(i)}, s_2^{(i)} \stackrel{a_2^{(i)}}{\longrightarrow} \cdots \stackrel{a_{T-1}^{(i)}}{\longrightarrow} r_{T-1}^{(i)}, s_T^{(i)}<br>$$</li><li>对每一条序列中的每一时间步 $t$ 的状态 $s$ 进行以下操作:</li></ol><ul><li>更新状态 $s$ 的计数器 $N(s) \leftarrow N(s)+1$;</li><li>更新状态 $s$ 的总回报 $M(s) \leftarrow M(s)+G_t$ ；</li></ul><ol start="3"><li>每一个状态的价值被估计为回报的平均值 $V(s)&#x3D;M(s) &#x2F; N(s)$ 。<br>根据大数定律，当 $N(s) \rightarrow \infty$ ，有 $V(s) \rightarrow V^\pi(s)$ 。计算回报的期望时，除了可以把所有的回报加起来除以次数，还有一种增量更新的方法。对于每个状态 $s$ 和对应回报$G$ ，进行如下计算:</li></ol><ul><li>$N(s) \leftarrow N(s)+1$</li><li>$V(s) \leftarrow V(s)+\frac{1}{N(s)}(G-V(S))$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">S = [<span class="string">&quot;s1&quot;</span>, <span class="string">&quot;s2&quot;</span>, <span class="string">&quot;s3&quot;</span>, <span class="string">&quot;s4&quot;</span>, <span class="string">&quot;s5&quot;</span>]  <span class="comment"># 状态集合</span></span><br><span class="line">A = [<span class="string">&quot;保持s1&quot;</span>, <span class="string">&quot;前往s1&quot;</span>, <span class="string">&quot;前往s2&quot;</span>, <span class="string">&quot;前往s3&quot;</span>, <span class="string">&quot;前往s4&quot;</span>, <span class="string">&quot;前往s5&quot;</span>, <span class="string">&quot;概率前往&quot;</span>]  <span class="comment"># 动作集合</span></span><br><span class="line"><span class="comment"># 状态转移函数</span></span><br><span class="line">P = &#123;</span><br><span class="line">    <span class="string">&quot;s1-保持s1-s1&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&quot;s1-前往s2-s2&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s1-s1&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s3-s3&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s4-s4&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s5-s5&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&quot;s4-前往s5-s5&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">    <span class="string">&quot;s4-概率前往-s2&quot;</span>: <span class="number">0.2</span>,</span><br><span class="line">    <span class="string">&quot;s4-概率前往-s3&quot;</span>: <span class="number">0.4</span>,</span><br><span class="line">    <span class="string">&quot;s4-概率前往-s4&quot;</span>: <span class="number">0.4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 奖励函数</span></span><br><span class="line">R = &#123;</span><br><span class="line">    <span class="string">&quot;s1-保持s1&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;s1-前往s2&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s1&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s3&quot;</span>: -<span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s4&quot;</span>: -<span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s5&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;s4-前往s5&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;s4-概率前往&quot;</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">gamma = <span class="number">0.5</span>  <span class="comment"># 折扣因子</span></span><br><span class="line">MDP = (S, A, P, R, gamma)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 策略1,随机策略</span></span><br><span class="line">Pi_1 = &#123;</span><br><span class="line">    <span class="string">&quot;s1-保持s1&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s1-前往s2&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s1&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s3&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s4&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s5&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s4-前往s5&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s4-概率前往&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 策略2</span></span><br><span class="line">Pi_2 = &#123;</span><br><span class="line">    <span class="string">&quot;s1-保持s1&quot;</span>: <span class="number">0.6</span>,</span><br><span class="line">    <span class="string">&quot;s1-前往s2&quot;</span>: <span class="number">0.4</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s1&quot;</span>: <span class="number">0.3</span>,</span><br><span class="line">    <span class="string">&quot;s2-前往s3&quot;</span>: <span class="number">0.7</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s4&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s3-前往s5&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="string">&quot;s4-前往s5&quot;</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="string">&quot;s4-概率前往&quot;</span>: <span class="number">0.9</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把输入的两个字符串通过“-”连接,便于使用上述定义的P、R变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">join</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    <span class="keyword">return</span> str1 + <span class="string">&#x27;-&#x27;</span> + str2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">MDP, Pi, timestep_max, number</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 采样函数,策略Pi,限制最长时间步timestep_max,总共采样序列数number &#x27;&#x27;&#x27;</span></span><br><span class="line">    S, A, P, R, gamma = MDP</span><br><span class="line">    episodes = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(number):</span><br><span class="line">        episode = []</span><br><span class="line">        timestep = <span class="number">0</span></span><br><span class="line">        s = S[np.random.randint(<span class="number">4</span>)]  <span class="comment"># 随机选择一个除s5以外的状态s作为起点</span></span><br><span class="line">        <span class="comment"># 当前状态为终止状态或者时间步太长时,一次采样结束</span></span><br><span class="line">        <span class="keyword">while</span> s != <span class="string">&quot;s5&quot;</span> <span class="keyword">and</span> timestep &lt;= timestep_max:</span><br><span class="line">            timestep += <span class="number">1</span></span><br><span class="line">            rand, temp = np.random.rand(), <span class="number">0</span></span><br><span class="line">            <span class="comment"># 在状态s下根据策略选择动作</span></span><br><span class="line">            <span class="keyword">for</span> a_opt <span class="keyword">in</span> A:</span><br><span class="line">                temp += Pi.get(join(s, a_opt), <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> temp &gt; rand:</span><br><span class="line">                    a = a_opt</span><br><span class="line">                    r = R.get(join(s, a), <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            rand, temp = np.random.rand(), <span class="number">0</span></span><br><span class="line">            <span class="comment"># 根据状态转移概率得到下一个状态s_next</span></span><br><span class="line">            <span class="keyword">for</span> s_opt <span class="keyword">in</span> S:</span><br><span class="line">                temp += P.get(join(join(s, a), s_opt), <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> temp &gt; rand:</span><br><span class="line">                    s_next = s_opt</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            episode.append((s, a, r, s_next))  <span class="comment"># 把（s,a,r,s_next）元组放入序列中</span></span><br><span class="line">            s = s_next  <span class="comment"># s_next变成当前状态,开始接下来的循环</span></span><br><span class="line">        episodes.append(episode)</span><br><span class="line">    <span class="keyword">return</span> episodes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 采样5次,每个序列最长不超过20步</span></span><br><span class="line"><span class="comment"># episodes = sample(MDP, Pi_1, 20, 5)#策略为Pi_1</span></span><br><span class="line"><span class="comment"># 对所有采样序列计算所有状态的价值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MC</span>(<span class="params">episodes, V, N, gamma</span>):</span><br><span class="line">    <span class="keyword">for</span> episode <span class="keyword">in</span> episodes:</span><br><span class="line">        G = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(episode) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment">#一个序列从后往前计算</span></span><br><span class="line">            (s, a, r, s_next) = episode[i]</span><br><span class="line">            G = r + gamma * G</span><br><span class="line">            N[s] = N[s] + <span class="number">1</span></span><br><span class="line">            V[s] = V[s] + (G - V[s]) / N[s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timestep_max = <span class="number">20</span></span><br><span class="line"><span class="comment"># 采样1000次,可以自行修改</span></span><br><span class="line">episodes = sample(MDP, Pi_1, timestep_max, <span class="number">1000</span>)</span><br><span class="line">gamma = <span class="number">0.5</span></span><br><span class="line">V = &#123;<span class="string">&quot;s1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s3&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s4&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s5&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">N = &#123;<span class="string">&quot;s1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s3&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s4&quot;</span>: <span class="number">0</span>, <span class="string">&quot;s5&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">MC(episodes, V, N, gamma)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用蒙特卡洛方法计算MDP的状态价值为\n&quot;</span>, V)</span><br></pre></td></tr></table></figure><h4 id="最优策略"><a href="#最优策略" class="headerlink" title="最优策略"></a>最优策略</h4><p>对于任意的状态 $s$ 都有 $V^\pi(s) \geq V^{\pi^{\prime}}(s)$ ，记 $\pi&gt;\pi^{\prime}$ 。</p><p>于是在有限状态 和动作集合的 MDP 中，至少存在一个策略比其他所有策略都好或者 至少存在一个策略不差于其他所有策略，这个策略就是<code>最优策略 (optimal policy)</code> 。最优策略可能有很多个，我们都将其表示为 $\pi^*(s)$<br>最优策略都有相同的状态价值函数，我们称之为最优状态价值函数， 表示为:<br>$$<br>V^*(s)&#x3D;\max <em>\pi V^\pi(s), \quad \forall s \in \mathcal{S}<br>$$<br>同理，我们定义最优动作价值函数:<br>$$<br>Q^*(s, a)&#x3D;\max <em>\pi Q^\pi(s, a), \quad \forall s \in \mathcal{S}, a \in \mathcal{A}<br>$$<br>最优状态价值函数和最优动作价值函数之间的关系：<br>$$<br>Q^*(s, a)&#x3D;r(s,a)+\gamma\sum</em>{s^\prime \in S}P(s^\prime \mid s,a)V^*(s^\prime)<br>$$<br>最优状态价值是选择此时使<code>最优动作价值</code>最大的那一个动作时的状态价值<br>$$<br>V^*(s)&#x3D;\max</em>{a \in \mathcal{A}}Q^*(s,a)<br>$$</p><h4 id="Bellman最优方程"><a href="#Bellman最优方程" class="headerlink" title="Bellman最优方程"></a>Bellman最优方程</h4><p>根据 $V^*(s)$ 和 $Q^*(s, a)$ 的关系，我们可以得到贝尔曼最优方程<br>(Bellman optimality equation) :<br>$$<br>\begin{gathered}<br>V^*(s)&#x3D;\max <em>{a \in \mathcal{A}}\left{r(s, a)+\gamma \sum</em>{s^{\prime} \in \mathcal{S}} p\left(s^{\prime} \mid s, a\right) V^<em>\left(s^{\prime}\right)\right} \<br>Q^</em>(s, a)&#x3D;r(s, a)+\gamma \sum_{s^{\prime} \in \mathcal{S}} p\left(s^{\prime} \mid s, a\right) \max _{a^{\prime} \in \mathcal{A}} Q^*\left(s^{\prime}, a^{\prime}\right)<br>\end{gathered}<br>$$</p><h3 id="DP优化"><a href="#DP优化" class="headerlink" title="DP优化"></a>DP优化</h3><p>基于动态规划的强化学习算法主要有两种一是<code>策略迭代</code>,二是<code>价值迭代</code></p><p>策略迭代:策略评估(使用贝尔曼期望方程-&gt;策略的状态价值函数)+策略提升</p><p><code>策略迭代算法</code><br>$$<br>\begin{aligned}<br>V^\pi(s) &amp; &#x3D;\mathbb{E}<em>\pi\left[R_t+\gamma V^\pi\left(S</em>{t+1}\right) \mid S_t&#x3D;s\right] \<br>&amp; &#x3D;\sum_{a \in A} \pi(a \mid s)\left(r(s, a)+\gamma \sum_{s^{\prime} \in S} p\left(s^{\prime} \mid s, a\right) V^\pi\left(s^{\prime}\right)\right) \<br>\end{aligned}<br>$$</p><h2 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h2><h2 id="DDPG"><a href="#DDPG" class="headerlink" title="DDPG"></a>DDPG</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.jianshu.com/p/1765772c8444">https://www.jianshu.com/p/1765772c8444</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;马尔科夫决策-MDP&quot;&gt;&lt;a href=&quot;#马尔科夫决策-MDP&quot; class=&quot;headerlink&quot; title=&quot;马尔科夫决</summary>
      
    
    
    
    <category term="Machine Learning" scheme="http://niceasiv.cn/categories/Machine-Learning/"/>
    
    
    <category term="Reinforcement learning" scheme="http://niceasiv.cn/tags/Reinforcement-learning/"/>
    
    <category term="Machine Learning" scheme="http://niceasiv.cn/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>策略蒸馏</title>
    <link href="http://niceasiv.cn/2023/03/04/Policy_Distillation/"/>
    <id>http://niceasiv.cn/2023/03/04/Policy_Distillation/</id>
    <published>2023-03-04T08:06:09.000Z</published>
    <updated>2023-03-04T08:06:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了理解蒸馏的含义，我们先以DQN为例</p><p>DQN（Deep Q-Network）是一种强化学习算法，它通过深度神经网络来近似Q函数，从而实现智能体的行为决策。下面我们将介绍一个针对DQN网络的案例。</p><p>假设我们有一个小型的迷宫环境，智能体的任务是通过左、右、上、下四个动作来找到宝藏并获得最高的奖励。我们可以使用DQN算法来训练智能体。</p><p>首先，我们需要定义状态空间、动作空间、奖励函数以及转移函数。在这个案例中，状态空间是迷宫中每个位置的坐标，动作空间是四个方向，奖励函数是在找到宝藏时获得的奖励，转移函数是在智能体执行一个动作后转移到下一个状态的过程。</p><p>然后，我们可以使用深度神经网络来近似Q函数。在这个案例中，我们可以使用一个简单的全连接神经网络，它的输入是当前状态，输出是四个动作的Q值。我们使用均方误差损失函数来度量Q值的预测误差，并使用梯度下降算法来优化神经网络参数。</p><p>接下来，我们可以使用经验回放机制来训练DQN网络。经验回放是一种存储智能体的经验，并从中随机抽样的机制。这样可以使得训练数据更加丰富、稳定，并且可以避免连续的训练样本之间的相关性。在每次训练中，我们随机从经验池中选择一个批次的样本，然后用它来更新神经网络参数。</p><p>最后，我们可以通过迭代训练来提高DQN网络的性能。我们通过不断地与环境交互、收集经验、更新神经网络参数来提高DQN网络的预测性能。在训练的过程中，我们可以使用ε-greedy策略来平衡探索和利用，这样可以使得智能体在探索新状态和利用已有知识之间找到一个平衡点。</p><p>通过以上的训练过程，我们可以得到一个训练好的DQN网络，它可以在迷宫环境中通过左、右、上、下四个动作来找到宝藏并获得最高的奖励。</p><p>下面是一个基于DQN算法的伪代码：</p><p>初始化神经网络 Q(s,a;θ) 的参数 θ 初始化目标网络 Q’(s,a;θ^-) 的参数 θ^-</p><p>初始化经验池 D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">for episode = 1 to M do: 初始化状态 s </span><br><span class="line">for t = 1 to T do:</span><br><span class="line">    选择动作 a ：</span><br><span class="line">        如果随机数小于 ε，则选择一个随机动作</span><br><span class="line">        否则，选择 a = argmax Q(s,a;θ)</span><br><span class="line">    </span><br><span class="line">    执行动作 a 并观察下一个状态 s&#x27; 和奖励 r</span><br><span class="line">    </span><br><span class="line">    存储经验 (s, a, r, s&#x27;) 到经验池 D</span><br><span class="line">    </span><br><span class="line">    从经验池 D 中随机抽取一个批次的经验 (s_i, a_i, r_i, s&#x27;_i)</span><br><span class="line">    </span><br><span class="line">    对于批次中的每个样本 (s_i, a_i, r_i, s&#x27;_i) ，计算目标 Q 值：</span><br><span class="line">        如果 s&#x27;_i 是终止状态，则 Q_target = r_i</span><br><span class="line">        否则，Q_target = r_i + γ max Q&#x27;(s&#x27;_i, a&#x27;;θ^-)</span><br><span class="line">    </span><br><span class="line">    使用 Q(s_i, a_i;θ) 和 Q_target 之间的均方误差来更新神经网络 Q(s,a;θ) 的参数 θ</span><br><span class="line">    </span><br><span class="line">    如果 t mod C == 0，那么将目标网络的参数 θ^- 更新为 Q(s,a;θ) 的参数 θ</span><br><span class="line">    </span><br><span class="line">    将状态更新为 s&#x27;</span><br><span class="line"></span><br><span class="line">减小 ε</span><br><span class="line">保存神经网络 Q(s,a;θ) 的参数 θ</span><br></pre></td></tr></table></figure><p>其中，M 是迭代训练的次数，T 是每个 episode 的最大步数，ε 是 ε-greedy 策略中的探索率，γ 是折扣因子，C 是更新目标网络的间隔，D 是经验池，Q 和 Q’ 分别是当前网络和目标网络。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了理解蒸馏的含义，我们先以DQN为例&lt;/p&gt;
&lt;p&gt;DQN（Deep Q-Network）是一种强化学习算法，它通过深度神经网络来近似Q函数，从而实现智能体的行为决策。下面我们将介绍一个针对DQN网络的案例。&lt;/p&gt;
&lt;p&gt;假设我们有一个小型的迷宫环境，智能体的任务是通过</summary>
      
    
    
    
    <category term="Machine Learning" scheme="http://niceasiv.cn/categories/Machine-Learning/"/>
    
    
    <category term="Distillation" scheme="http://niceasiv.cn/tags/Distillation/"/>
    
    <category term="Reinforcement learning" scheme="http://niceasiv.cn/tags/Reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>通过修改 PE 装载 DLL 实验</title>
    <link href="http://niceasiv.cn/2022/11/28/PE_DLL/"/>
    <id>http://niceasiv.cn/2022/11/28/PE_DLL/</id>
    <published>2022-11-28T10:16:09.000Z</published>
    <updated>2023-04-29T15:53:23.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考课件 chap06.pdf 中“通过修改PE装载DLL”一节的内容，以及课本第 5.5节的 内容，实现对notepad.exe（修復並下載<a href="https://www.exefiles.com/zh-tw/exe/notepad-exe/">Notepad.exe</a>）的修改，使得修改后的 notepad.exe 在双击运行时，能够自动隐式装载 MyDll3.dll，并进而 将一个网页下载到本地index.html 文件。</p><p>本上机作业的目的是让大家深入理解 PE 文件中的导入表、导入地址表等关键结构及相关的功能。</p><ol><li>本实验所使用的notepad.exe 是 Windows 7系统（最好32位版）中的可执行程序，MyDll3.dll 也仅保证在 Windows 7下能正常工作，因此，建议在 Windows 7环境（可预先安装虚拟机）下进行修改。请在虚拟机中禁用所有杀毒软件，确保修改过程不会受到杀毒软件的干扰。保证虚拟机能联网，以便DLL装载后的网页下载动作能正常完成。</li><li>下载notepad.exe可能与课本中所描述的notepad.exe版本不一致，应主要参考课件中的修改流程。</li><li>使用PEview分析PE文件，使用HxD编辑器修改PE文件。</li><li>直接使用本书所附代码编译生成 MyDll3.dll。</li></ol></blockquote><h2 id="PE文件静态注入"><a href="#PE文件静态注入" class="headerlink" title="PE文件静态注入"></a>PE文件静态注入</h2><p>这里因为notepad一直注入不成功，换了个win7版本也不行，好像是安全策略的原因，就只好找另外一个<a href="https://cdn.niceasiv.cn/textview.exe">textview.exe</a>进行注入</p><p>代码是李承远老师的逆向工程核心原理当中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;shlobj.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Wininet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tchar.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Wininet.lib&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_BUF_SIZE  (4096)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_URL <span class="string">L&quot;http://www.baidu.com/index.html&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_INDEX_FILE <span class="string">L&quot;index.html&quot;</span></span></span><br><span class="line">HWND g_hWnd = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//  导出函数，但是没有任何功能，仅仅保持dll文件的形式上完整。</span></span><br><span class="line">    __declspec(dllexport) <span class="type">void</span> <span class="title function_">dummy</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//DownloadURL  下载 szURL 中指定网站的文件，并将其保存在 szFile 目录。</span></span><br><span class="line">BOOL <span class="title function_">DownloadURL</span><span class="params">(LPCTSTR szURL, LPCTSTR szFile)</span></span><br><span class="line">&#123;</span><br><span class="line">    BOOL            bRet = FALSE;</span><br><span class="line">    HINTERNET        hInternet = <span class="literal">NULL</span>, hURL = <span class="literal">NULL</span>;</span><br><span class="line">    BYTE            pBuf[DEF_BUF_SIZE] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    DWORD           dwBytesRead = <span class="number">0</span>;</span><br><span class="line">    FILE* pFile = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">errno_t</span>         err = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    hInternet = InternetOpen(<span class="string">L&quot;ReverseCore&quot;</span>,</span><br><span class="line">        INTERNET_OPEN_TYPE_PRECONFIG,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == hInternet)</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">L&quot;InternetOpen() failed!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    hURL = InternetOpenUrl(hInternet,</span><br><span class="line">        szURL,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        INTERNET_FLAG_RELOAD,</span><br><span class="line">        <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == hURL)</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">L&quot;InternetOpenUrl() failed!&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> _DownloadURL_EXIT;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (err = _tfopen_s(&amp;pFile, szFile, <span class="string">L&quot;wt&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">L&quot;fopen() failed!&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> _DownloadURL_EXIT;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (InternetReadFile(hURL, pBuf, DEF_BUF_SIZE, &amp;dwBytesRead))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dwBytesRead)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        fwrite(pBuf, dwBytesRead, <span class="number">1</span>, pFile);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    bRet = TRUE;</span><br><span class="line"> </span><br><span class="line">_DownloadURL_EXIT:</span><br><span class="line">    <span class="keyword">if</span> (pFile)</span><br><span class="line">        fclose(pFile);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (hURL)</span><br><span class="line">        InternetCloseHandle(hURL);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (hInternet)</span><br><span class="line">        InternetCloseHandle(hInternet);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">BOOL CALLBACK <span class="title function_">EnumWindowsProc</span><span class="params">(HWND hWnd, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD dwPID = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    GetWindowThreadProcessId(hWnd, &amp;dwPID);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (dwPID == (DWORD)lParam)</span><br><span class="line">    &#123;</span><br><span class="line">        g_hWnd = hWnd;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">HWND <span class="title function_">GetWindowHandleFromPID</span><span class="params">(DWORD dwPID)</span></span><br><span class="line">&#123;</span><br><span class="line">    EnumWindows(EnumWindowsProc, dwPID);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> g_hWnd;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//DropFile 函数将下载的 index.html 文件 拖到 TextView_Path.exe进程并显示其内容。</span></span><br><span class="line">BOOL <span class="title function_">DropFile</span><span class="params">(LPCTSTR wcsFile)</span></span><br><span class="line">&#123;</span><br><span class="line">    HWND            hWnd = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD           dwBufSize = <span class="number">0</span>;</span><br><span class="line">    BYTE* pBuf = <span class="literal">NULL</span>;</span><br><span class="line">    DROPFILES* pDrop = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span>            szFile[MAX_PATH] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    HANDLE          hMem = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    WideCharToMultiByte(CP_ACP, <span class="number">0</span>, wcsFile, <span class="number">-1</span>,</span><br><span class="line">        szFile, MAX_PATH, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">    dwBufSize = <span class="keyword">sizeof</span>(DROPFILES) + <span class="built_in">strlen</span>(szFile) + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!(hMem = GlobalAlloc(GMEM_ZEROINIT, dwBufSize)))</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">L&quot;GlobalAlloc() failed!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    pBuf = (LPBYTE)GlobalLock(hMem);</span><br><span class="line"> </span><br><span class="line">    pDrop = (DROPFILES*)pBuf;</span><br><span class="line">    pDrop-&gt;pFiles = <span class="keyword">sizeof</span>(DROPFILES);</span><br><span class="line">    strcpy_s((<span class="type">char</span>*)(pBuf + <span class="keyword">sizeof</span>(DROPFILES)), <span class="built_in">strlen</span>(szFile) + <span class="number">1</span>, szFile);</span><br><span class="line"> </span><br><span class="line">    GlobalUnlock(hMem);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!(hWnd = GetWindowHandleFromPID(GetCurrentProcessId())))</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">L&quot;GetWndHandleFromPID() failed!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    PostMessage(hWnd, WM_DROPFILES, (WPARAM)pBuf, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">    TCHAR szPath[MAX_PATH] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    TCHAR* p = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    OutputDebugString(<span class="string">L&quot;ThreadProc() start...&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    GetModuleFileName(<span class="literal">NULL</span>, szPath, <span class="keyword">sizeof</span>(szPath));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (p = _tcsrchr(szPath, <span class="string">L&#x27;\\&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        _tcscpy_s(p + <span class="number">1</span>, wcslen(DEF_INDEX_FILE) + <span class="number">1</span>, DEF_INDEX_FILE);</span><br><span class="line"> </span><br><span class="line">        OutputDebugString(<span class="string">L&quot;DownloadURL()&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (DownloadURL(DEF_URL, szPath))</span><br><span class="line">        &#123;</span><br><span class="line">            OutputDebugString(<span class="string">L&quot;DropFlie()&quot;</span>);</span><br><span class="line">            DropFile(szPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    OutputDebugString(<span class="string">L&quot;ThreadProc() end...&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        CloseHandle(CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dummmy()</code>函数实际是dll文件向外部提供服务的导出函数，但正如所见,它没有任何功能。既然如此，为何还要将其导出呢?这是为了保持形式上的完整性，mydll3.dll能够顺利添加到notepad_patch.exe文件的导入表。</p><p>生成的<a href="https://cdn.niceasiv.cn/myhack3.dll">myhack3.dll</a></p><ol><li>查看IDT<strong>是否有足够空间</strong></li></ol><p>我们从Image_Optional_Header的IMPORT Table得到结构体数组的RVA和Size</p><p><img src="https://cdn.niceasiv.cn/image-20221129084743308.png" alt="image-20221129084743308"></p><p>通过查看image_section_header，发现RVA84CC处于rdata区域</p><p><img src="https://cdn.niceasiv.cn/image-20221129084920604.png" alt="image-20221129084920604"></p><p>计算偏移</p><p>0x6000-0x5200 &#x3D; 0xE00</p><p>文件偏移&#x3D;即0x84CC -0xE00 &#x3D; 0x76CC</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;     <span class="comment">// 0 for terminating null import descriptor</span></span><br><span class="line">        DWORD   OriginalFirstThunk; <span class="comment">// RVA 指向INT (PIMAGE_THUNK_DATA)</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">DWORD   TimeDateStamp;   </span><br><span class="line"></span><br><span class="line">    DWORD   ForwarderChain;     <span class="comment">// -1 if no forwarders</span></span><br><span class="line"></span><br><span class="line">    DWORD   Name;            <span class="comment">//dll 名称</span></span><br><span class="line"></span><br><span class="line">    DWORD   FirstThunk;         <span class="comment">//指向引入函数真实地址单元处的RVA  IAT</span></span><br><span class="line"></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p>也可以将PEview调成文件偏移视图查看，可以看到文件偏移确实是0x76CC</p><p><img src="https://cdn.niceasiv.cn/image-20221129085530959.png" alt="image-20221129085530959"></p><p>然后我们使用010 editor打开可以发现64Bytes的空间，有五个IDT结构体，最后一个为NULL,在我们的IDT之后紧贴着其它数据，我们没有足够的空间来添加一个0x14字节的结构体进去</p><p><img src="https://cdn.niceasiv.cn/image-20221129090351201.png" alt="image-20221129090351201"></p><ol start="2"><li><p><strong>移动IDT</strong></p><p>从节区头信息可以得到，其内存virtual Size与文件的大小Size of Raw Data是不一样的</p><p><img src="https://cdn.niceasiv.cn/image-20221129091817990.png" alt="image-20221129091817990"></p><p><code>.rdata</code> 节区在磁盘文件中的大小为 <code>2E00</code>,而文件执行后被加载到内存时，程序实际使用的数据大小（映射大小）仅为 2C56 ，剩余未被使用的区域大小为 1AA （2E00 - 2C56)足够放下(0x14 * 6 &#x3D; 0x78)字节的数据</p><p>可以先从0x8C80开始存放我们的IDT(转化为文件偏移为0x7E80)(新IDT: 0x7E80到(0x7E80+0x78)）</p></li></ol><p>TextView.exe 文件中，导入表的 RVA 值为 84CC 。接下来，将导入表的 RVA 值更改为新 IDT 的 RVA 值 8C80,在 Size 原值64字节的基础上再加 14字节（IID 结构体的大小），修改为78字节</p><p><img src="https://cdn.niceasiv.cn/image-20221129092707789.png" alt="image-20221129092707789">修改后导入表位于 RVA: 8C80(RAW : 7E80)地址处</p><p>先使用010 Editor完全复制原IDT（RAW:76CC~772F）,然后覆盖到IDT的新位置(RAW:7E80)</p><p><img src="https://cdn.niceasiv.cn/image-20221129093114593.png" alt="image-20221129093114593" style="zoom:80%;" /><img src="https://cdn.niceasiv.cn/image-20221129170652737.png" alt="image-20221129170652737"></p><p>在7ED0处写入IID</p><p><img src="https://cdn.niceasiv.cn/image-20221129151000219.png" alt="image-20221129151000219"></p><p>然后在新IDT尾部(RAW:7ED0)添加与mydll3对应的IID</p><p><img src="https://cdn.niceasiv.cn/image-20221129170916339.png" alt="image-20221129170916339"></p><p>转到 7F00 地址处，输入相应值</p><p><img src="https://cdn.niceasiv.cn/image-20221129171549719.png" alt="image-20221129171549719"></p><p>3.<strong>修改 IAT 节区的属性值</strong></p><p>向原属性（ChAracteristics）40000040 添加 IMAGE_SCN_MEM_WRITE(80000000)属性值</p><p>也就是C0000040</p><p><img src="https://cdn.niceasiv.cn/image-20221129183917794.png" alt="image-20221129183917794"></p><p><img src="https://cdn.niceasiv.cn/image-20221129184116973.png" alt="image-20221129184116973"></p><p>使用 PEView 工具打开修改后的 TextView.exe 文件，查看其 IDT，发现已经装载上了myhack3.dll</p><img src="https://cdn.niceasiv.cn/image-20221129184229569.png" alt="image-20221129184229569" style="zoom:80%;" /><img src="https://cdn.niceasiv.cn/image-20221129184625924.png" alt="image-20221129184625924" style="zoom:80%;" /><p>点开，我们发现它成功下载了百度某个cdn下的index.html，并展示在文字框中</p><p><img src="https://cdn.niceasiv.cn/image-20221129184740738.png" alt="image-20221129184740738"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[[原创]通过修改PE加载DLL]<a href="https://bbs.pediy.com/thread-267045-1.htm">https://bbs.pediy.com/thread-267045-1.htm</a></p><p>[通过修改PE文件的方式导入DLL]<a href="https://blog.csdn.net/fanxiaoyao1/article/details/125379489">https://blog.csdn.net/fanxiaoyao1/article/details/125379489</a></p><p>李承远 逆向工程核心原理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考课件 chap06.pdf 中“通过修改PE装载DLL”一节的内容，以及课本第 5.5节的 内容，实现对notepad.exe（修復並下載&lt;a href=&quot;https://www.exefiles.com/zh-tw/exe/notepad-e</summary>
      
    
    
    
    <category term="course" scheme="http://niceasiv.cn/categories/course/"/>
    
    
    <category term="Reverse" scheme="http://niceasiv.cn/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>RSA 加密体制破译</title>
    <link href="http://niceasiv.cn/2022/11/01/RSAattack/"/>
    <id>http://niceasiv.cn/2022/11/01/RSAattack/</id>
    <published>2022-11-01T10:16:09.000Z</published>
    <updated>2023-09-08T06:44:33.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目摘要"><a href="#题目摘要" class="headerlink" title="题目摘要"></a>题目摘要</h2><h3 id="赛题名称：-RSA-加密体制破译"><a href="#赛题名称：-RSA-加密体制破译" class="headerlink" title="赛题名称： RSA 加密体制破译"></a>赛题名称： RSA 加密体制破译</h3><h3 id="赛题描述"><a href="#赛题描述" class="headerlink" title="赛题描述"></a>赛题描述</h3><p>RSA密码算法是使用最为广泛的公钥密码体制。该体制简单且易于实现，只需要选择5个参数即可（两个素数$𝑝$和$𝑞$、模数$𝑁&#x3D;𝑝𝑞$、加密指数$𝑒$和解密指数$𝑑$。设𝑚为待加密消息RSA体制破译相当于已知$𝑚^𝑒$ $mod$ $𝑁$能否还原𝑚的数论问题。目前模数规模为1024比特的RSA算法一般情况下是安全的，但是如果参数选取不当，同样存在被破译的可能。有人制作了一个RSA加解密软件采用的RSA体制的参数特点描述见密码背景部分）。</p><p>已知该软件发送某个明文的所有参数和加密过程的全部数据（加密案例文件详见附件3-1。Alice使用该软件发送了一个通关密语，且所有加密数据已经被截获，请问能否仅从加密数据恢复该通关密语及RSA体制参数？如能请给出原文和参数，如不能请给出已恢复部分并说明剩余部分不能恢复的理由？</p><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><ol><li>原始明文</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a test of my RSA system.</span><br></pre></td></tr></table></figure><p>Frame0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>Frame1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A5F51EB02EA9C0CC9B96926A08A761FE3E7CDB6E5B348DBEAEC761DBCFCDB15A6C76F8EE08196008AE60E396D7E228C6DAFC3CC1127F16EC87576B89C151F20F99098621FD46872BC92CDA8C915B758E5C0CACB994F55B8705B938126E08589E2502A7B9019C9A62E82392E8449E00CFC7DA17B8CDE92F9516CE9A2009F42DD90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001789018FDB800AD59A54D27A77F280515BB3BFAB1CD75CB0A255A116D4A44849459FD887FF091F87C0B3E6305F019700E4E4CB3646D1DF276DFB87C4F64245F77377508EC6A796236F8ABB125023D3F4B898F55E3342D0A852193AF890990EA82F12FC85917BF132F2A58C449648D6E934B24E80307AB092DB18110D77BBA0F8E</span><br></pre></td></tr></table></figure><p>Frame2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>Frame3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>2.过程及参数</p><p>  RSA 密码算法描述如下，包含体制参数选取和加解密过程。 </p><p>   1）RSA 体制参数选取 </p><p>​      Step1.每个使用者，任意选择两个大素数$𝑝$和$𝑞$，并求出其乘积$𝑁&#x3D;𝑝𝑞$。 </p><p>​      Step2.令$𝜑(𝑁)&#x3D;(𝑝−1)(𝑞−1)$选择整数$𝑒$，使得$GCD(𝑒,𝜑(𝑁))&#x3D;1$，并求出$𝑒$模 $𝜑(𝑁)$的逆元$𝑑$，即$𝑒𝑑≡1 mod (𝜑(𝑁))$ </p><p>​      Step3.将数对$(𝑒,𝑁)$公布为公钥，$𝑑$保存为私钥。 </p><p>   2）加解密过程</p><p>​      Bob欲传递明文𝑚给 Alice，则Bob首先由公开途径找出 Alice 的公钥 $(𝑒,𝑁)$，Bob 计算加密的信息$𝑐$为:$𝑐 ≡ 𝑚^𝑒$ $mod$ $𝑁$。</p><p>​      Bob 将密文$𝑐$传送给 Alice。 随后 Alice 利用自己的私钥$𝑑$解密：<br>​      $𝑐^e ≡ (𝑚^𝑒)^𝑑 ≡ 𝑚^{𝑒𝑑}≡ 𝑚\space mod\space 𝑁$  </p><p>   Alice 使用的 RSA 密码体制有以下事项需要说明： </p><p>​1）模数𝑁&#x3D;𝑝𝑞规模为<strong>1024比特</strong>，其中𝑝，𝑞为素数； </p><p>​2）素数𝑝由某一随机数发生器生成；</p><p>​3）素数𝑞可以随机选择，也可以由2）中的随机数发生器产生； </p><p>​4）可以对文本加密，每次加密<strong>最多8个明文字符</strong>； </p><p>​5）明文超过8个字符时，对明文分片，<strong>每个分片不超过8个字符</strong>； </p><p>​6）分片&#x3D;&#x3D;明文填充为512比特消息后再进行加密，填充规则为高位添加64比特标志位，随后加上32比特通信序号&#x3D;&#x3D;，再添加若干个0，最后64比特为明文分片字符对应的ASCII码（**注：填充方式参见加密案例，但注意每次通信的标志位可能变化） </p><p>​7）分片加密后发送一个加密帧数据，帧数据文件名称为FrameXX，其中XX表示接收序号，该序号不一定等于通信序号； </p><p>​8）帧数据的数据格式如下，其中数据都是16进制表示，结构如下&#x3D;&#x3D;<strong>1024bit模数N | 1024bit加密指数e | 1024bit密文</strong>&#x3D;&#x3D; $m^e\space mod \space N$。 </p><p>​9）由于Alice初次使用该软件，可能会<strong>重复发送</strong>某一明文分片。</p><p><strong>符号说明：</strong> n 模数、p 素数、q素数、e加密指数、d 解密指数、m 明文分片、c 密文分片、“0X”十六进制数据表示</p><p><strong>明文：</strong> “This is a test of my RSA system.”将其分割为4个8字符长度消息(注意：空格也是一个字符)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> 该<span class="number">8</span>字符对应的ASCII为<span class="number">54</span><span class="number">68</span><span class="number">69</span><span class="number">73</span><span class="number">20</span><span class="number">69</span><span class="number">73</span><span class="number">20</span>将其视为<span class="number">64</span>比特整数为==&gt;<span class="number">0X5468697320697320</span></span><br><span class="line">a test o该<span class="number">8</span>字符对应的ASCII为<span class="number">61</span><span class="number">20</span><span class="number">74</span><span class="number">65</span><span class="number">73</span><span class="number">74</span><span class="number">20</span>6F将其视为<span class="number">64</span>比特整数为==&gt;<span class="number">0X612074657374206F</span></span><br><span class="line">f my RSA该<span class="number">8</span>字符对应的ASCII为<span class="number">66</span><span class="number">20</span>6D<span class="number">79</span><span class="number">20</span><span class="number">52</span><span class="number">53</span><span class="number">41</span>将其视为<span class="number">64</span>比特整数为==&gt;<span class="number">0X66206D7920525341</span></span><br><span class="line"> system.该<span class="number">8</span>字符对应的ASCII为<span class="number">20</span><span class="number">73</span><span class="number">79</span><span class="number">73</span><span class="number">74</span><span class="number">65</span>6D2E将其视为<span class="number">64</span>比特整数为==&gt;<span class="number">0X2073797374656D2E</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选择前缀为0xFFFFFFFFFFFFFFFF,再添加通信序号和若干个0，最终填充后的4条消息依次为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005468697320697320</span></span><br><span class="line"><span class="number">0xFFFFFFFFFFFFFFFF000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000612074657374206F</span></span><br><span class="line"><span class="number">0xFFFFFFFFFFFFFFFF00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066206D7920525341</span></span><br><span class="line"><span class="number">0xFFFFFFFFFFFFFFFF0000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000002073797374656D2E</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第0个明文分片参数及加密结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p= <span class="number">0XC60C5F1B997ED8A5E340023F33D2E269CFB423A3CF66B46D3F686747403A92B1265CB12B9A4E0135B890254F31A2C3F96A0427B39A36DEFDEEB85C57A80A9641</span></span><br><span class="line">q= <span class="number">0XD684DA331AB6157DA338B6D7B08AB4C1B72C29BB7F9EF445466056DFDBF29809C4D4A2435986A40DE688AFE7CC5A5C519F7C63CB486E44D523B0E1EF21C22199</span></span><br><span class="line">n= <span class="number">0XA5F51EB02EA9C0CC9B96926A08A761FE3E7CDB6E5B348DBEAEC761DBCFCDB15A6C76F8EE08196008AE60E396D7E228C6DAFC3CC1127F16EC87576B89C151F20F99098621FD46872BC92CDA8C915B758E5C0CACB994F55B8705B938126E08589E2502A7B9019C9A62E82392E8449E00CFC7DA17B8CDE92F9516CE9A2009F42DD9</span></span><br><span class="line">e= <span class="number">0X10001</span></span><br><span class="line">d= <span class="number">0X4C5340AAECBB1BB5BE74F09F9D9D45BF4583ECF38334D75FF44834A4809CEC4D57071C9374DC1EC3BF574634B0D30DC7EF1D04E0131EAA2F5C4B8364D6A95676C23F9DADAAB4523A6F5B22EC5904650BF558B3FDF39E3B13EA4771FB1D297DA03C8E1E82F4759B31A9492C56E4D1C690A66ECEC430849A17C027D1A7480F1E01</span></span><br><span class="line">m= <span class="number">0XFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005468697320697320</span></span><br><span class="line">c= <span class="number">0X9726C82FED1E6CD58DE825528AE5634653C9921CAE02AFF7325F20D6E7085B7C8E3DC78D7518A78A8BC7D07E2E837083324579510851827794AE3D1FB9BAB360B1413A8F171A83804CEA73DFBC1248139BB27EB7D5BAD724AD8B08F51888B90562AF950725ACDD698F817AE62746CEA09479A191A6552B0116830355C68D0F61</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第1个明文分片参数及加密结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p= <span class="number">0XC60C5F1B997ED8A5E340023F33D2E269CFB423A3CF66B46D3F686747403A92B1265CB12B9A4E0135B890254F31A2C3F96A0427B39A36DEFDEEB85C57A80A9641</span></span><br><span class="line">q= <span class="number">0XD684DA331AB6157DA338B6D7B08AB4C1B72C29BB7F9EF445466056DFDBF29809C4D4A2435986A40DE688AFE7CC5A5C519F7C63CB486E44D523B0E1EF21C22199</span></span><br><span class="line">n= <span class="number">0XA5F51EB02EA9C0CC9B96926A08A761FE3E7CDB6E5B348DBEAEC761DBCFCDB15A6C76F8EE08196008AE60E396D7E228C6DAFC3CC1127F16EC87576B89C151F20F99098621FD46872BC92CDA8C915B758E5C0CACB994F55B8705B938126E08589E2502A7B9019C9A62E82392E8449E00CFC7DA17B8CDE92F9516CE9A2009F42DD9</span></span><br><span class="line">e= <span class="number">0X10001</span></span><br><span class="line">d= <span class="number">0X4C5340AAECBB1BB5BE74F09F9D9D45BF4583ECF38334D75FF44834A4809CEC4D57071C9374DC1EC3BF574634B0D30DC7EF1D04E0131EAA2F5C4B8364D6A95676C23F9DADAAB4523A6F5B22EC5904650BF558B3FDF39E3B13EA4771FB1D297DA03C8E1E82F4759B31A9492C56E4D1C690A66ECEC430849A17C027D1A7480F1E01</span></span><br><span class="line">m= <span class="number">0XFFFFFFFFFFFFFFFF000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000612074657374206F</span></span><br><span class="line">c= <span class="number">0X789018FDB800AD59A54D27A77F280515BB3BFAB1CD75CB0A255A116D4A44849459FD887FF091F87C0B3E6305F019700E4E4CB3646D1DF276DFB87C4F64245F77377508EC6A796236F8ABB125023D3F4B898F55E3342D0A852193AF890990EA82F12FC85917BF132F2A58C449648D6E934B24E80307AB092DB18110D77BBA0F8E</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第2个明文分片参数及加密结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p= <span class="number">0XD502B3D96C648A9393966CDD37188D37576AA221290C861B347ED7A57640993F7ED2D16992B42AA3CA66936D3268DE47EB3A61B1495C982BF54EC0350B907C4F3CA272F9ED04EEB355367DFDA1B89357130A25411DAC4E3B8A1EECC594E0435F0E7298897B54D6C334062C8D8508AC67CEDAECD1A5FCA84BF2EE5D</span></span><br><span class="line">q= <span class="number">0XE00258CB6F</span></span><br><span class="line">n= <span class="number">0XBA645145D9DE58B0FFA6FC4624A2815092D2A2DC405E7A2515F985727D3C52F479A4D04694568CA9B08391BE79BD122808CF6034AB7251088687BFF5916A4F4723FE1372DCF9B069CAB269A9F8F47CB50078D3279B9452C9B3B65A07B49C793783EDB8EB8D8F1A220D9EFED33147483103A2551A96932738255493F13B511953</span></span><br><span class="line">e= <span class="number">0X10001</span></span><br><span class="line">d= <span class="number">0X524EB244F1CE59966C273B91AC40B620CFB55BA2030E871F01147E11844888B6224C5D4DE14551DFDB93C984DAD94A4359643B247ED6CC7DE774A15440D525E26FE9CF4328DBEF2AAA8E402922596F1C23B8F117C018870777434C93B68F1028295DFA6E69FA8E00FFC4EFEF747C348EDBC99C529B7C3B649813647FF90A8261</span></span><br><span class="line">m= <span class="number">0XFFFFFFFFFFFFFFFF00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066206D7920525341</span></span><br><span class="line">c= <span class="number">0X534810A0D1B2F6FB257DC3BBDA30AA76157B89038E52D05EE1E5DB06C2D79FAE84892950EF5FD8ADC4F241C3741AD7C97002902C8CA4D96574F28EDCEF3BEF15303335FA8D250102B4EE77E3B405E30F6B81E92403A8881285B65F29668E05B9CD6AC44FC1CD193CF4A5811A2649BE0EDEFBA91FA7143266286C5EC6EE8077D6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第3个明文分片参数及加密结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p= <span class="number">0XD502B3D96C648A9393966CDD37188D37576AA221290C861B347ED7A57640993F7ED2D16992B42AA3CA66936D3268DE47EB3A61B1495C982BF54EC0350B907C4F3CA272F9ED04EEB355367DFDA1B89357130A25411DAC4E3B8A1EECC594E0435F0E7298897B54D6C334062C8D8508AC67CEDAECD1A5FCA84BF2EE5D</span></span><br><span class="line">q= <span class="number">0XE00258CB6F</span></span><br><span class="line">n= <span class="number">0XBA645145D9DE58B0FFA6FC4624A2815092D2A2DC405E7A2515F985727D3C52F479A4D04694568CA9B08391BE79BD122808CF6034AB7251088687BFF5916A4F4723FE1372DCF9B069CAB269A9F8F47CB50078D3279B9452C9B3B65A07B49C793783EDB8EB8D8F1A220D9EFED33147483103A2551A96932738255493F13B511953</span></span><br><span class="line">e= <span class="number">0X10001</span></span><br><span class="line">d= <span class="number">0X524EB244F1CE59966C273B91AC40B620CFB55BA2030E871F01147E11844888B6224C5D4DE14551DFDB93C984DAD94A4359643B247ED6CC7DE774A15440D525E26FE9CF4328DBEF2AAA8E402922596F1C23B8F117C018870777434C93B68F1028295DFA6E69FA8E00FFC4EFEF747C348EDBC99C529B7C3B649813647FF90A8261</span></span><br><span class="line">m= <span class="number">0XFFFFFFFFFFFFFFFF0000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000002073797374656D2E</span></span><br><span class="line">c= <span class="number">0X8805A937DABF25FE760F9F398C7D9D5955EF7468FEC89119F8DD69874FB009AB2C424BD6A8E85401C4CD130B48D0490586DFBD81C8154EDCEFC3AFC4F80338432197EB059AB54CF109B231416FB65E2F9BE4F01D455E25486D8E155A5874E8A910E8C65F73ACD953D316B35A148D5AC5834D86F66AD415EBA38AD3908B32780A</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="密文结构解析"><a href="#密文结构解析" class="headerlink" title="密文结构解析"></a>密文结构解析</h2><p>提取传送帧的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n=[]<span class="comment">#模数集合</span></span><br><span class="line">e=[]<span class="comment">#公钥指数集合</span></span><br><span class="line">c=[]<span class="comment">#密文集合</span></span><br><span class="line">m=&#123;&#125;<span class="comment">#明文集合</span></span><br><span class="line"><span class="comment"># Path: code\main.py</span></span><br><span class="line">sloved=[]<span class="comment">#已解密的密文集合</span></span><br><span class="line">filename=[<span class="string">&#x27;RSA\data\Frame&#x27;</span>+<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>)]<span class="comment">#文件名集合</span></span><br><span class="line"><span class="comment"># print(filename)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">        f=<span class="built_in">open</span>(filename[i],<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        data=f.read()</span><br><span class="line">        <span class="comment">#str-&gt;hex-&gt;int</span></span><br><span class="line">        n.append(<span class="built_in">int</span>(data[:<span class="number">256</span>],<span class="number">16</span>))</span><br><span class="line">        e.append(<span class="built_in">int</span>(data[<span class="number">256</span>:<span class="number">512</span>],<span class="number">16</span>))</span><br><span class="line">        c.append(<span class="built_in">int</span>(data[<span class="number">512</span>:],<span class="number">16</span>))</span><br><span class="line"><span class="comment">#输出e的值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]=&#x27;</span>+<span class="built_in">str</span>(e[i]))</span><br><span class="line"><span class="comment">#输出n的值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]=&#x27;</span>+<span class="built_in">str</span>(n[i]))</span><br><span class="line"><span class="comment">#输出c的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]=&#x27;</span>+<span class="built_in">str</span>(c[i]))</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">e[0]=46786465362686334917265996843779843233606992585424976481745055335468678697948774988450305612127967926533923268260412557000125153569622340353246096040604284883505587337829322949633637609180797447754513992039018904786537115087888005528547900640339270052628915440787357271345416818313808448127098885767015748889</span><br><span class="line">e[1]=65537</span><br><span class="line">e[2]=65537</span><br><span class="line">e[3]=5</span><br><span class="line">e[4]=152206992575706893484835984472544529509325440944131662631741403414037956695665533186650071476146389737020554215956181827422540843366433981607643940546405002217220286072880967331118344806315756304650248634546597784597963886656422706197757265316981889118026978865295597135470735576032282694348773714479076093197</span><br><span class="line">e[5]=65537</span><br><span class="line">e[6]=65537</span><br><span class="line">e[7]=3</span><br><span class="line">e[8]=5</span><br><span class="line">e[9]=65537</span><br><span class="line">e[10]=65537</span><br><span class="line">e[11]=3</span><br><span class="line">e[12]=5</span><br><span class="line">e[13]=65537</span><br><span class="line">e[14]=65537</span><br><span class="line">e[15]=3</span><br><span class="line">e[16]=5</span><br><span class="line">e[17]=65537</span><br><span class="line">e[18]=65537</span><br><span class="line">e[19]=65537</span><br><span class="line">e[20]=5</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n[0]=90058705186558569935261948496132914380077312570281980020033760044382510933070450931241348678652103772768114420567119848142360867111065753301402088676701668212035175754850951897103338079978959810673297215370534716084813732883918187890434411552463739669878295417744080700424913250020348487161014643951785502867</span><br><span class="line">n[1]=92921790800705826977497755832938592891062287903332844896046168726101016067456726822505517352409138948392871113192427210529297191908638888388136391240683157994654207338463678065440899870434887094216772312358731142317774259942199808535233769089985063860828267808621928898445383706310204223006136919334252875849</span><br><span class="line">n[2]=90252653600964453524559669296618135272911289775949194922543520872164147768650421038176330053599968601135821750672685664360786595430028684419411893316074286312793730822963564220564616708573764764386830123818197183233443472506106828919670406785228124876225200632055727680225997407097843708009916059133498338129</span><br><span class="line">n[3]=92270627783020341903769877272635163757611737252302329401876135487358785338853904185572496782685853218459404423868889360808646192858060332110830962463986164014331540336037718684606223893506327126112739408023014900003600028654929488487584130630596342720833061628867179840913592694993869009133576053124769728363</span><br><span class="line">n[4]=90058705186558569935261948496132914380077312570281980020033760044382510933070450931241348678652103772768114420567119848142360867111065753301402088676701668212035175754850951897103338079978959810673297215370534716084813732883918187890434411552463739669878295417744080700424913250020348487161014643951785502867</span><br><span class="line">n[5]=99193711547257063160816850544214924340574358752670644615293764532335872088470223740970673347993652626497557387222167784182876395436088845281840169701654629849214222297784511349059698963212947299142320497759258889425182705042123217476724761095690092179821753840224757786599021225709340258545979566824267620959</span><br><span class="line">n[6]=146839643970016464813197409569004275595828791825722617066607993001682901023784267554815946189374651530288894322286859792246413142980277245909181062525398546369553995023529451396820549308690493928593324007689135648753323161394735120908960458860801743476353228970081369439513197105039143930008573928693059198131</span><br><span class="line">n[7]=155266493936043103849855199987896813716831986416707080645036022909153373110367007140301635144950634879983289720164117794783088845393686109145443728632527874768524615377182297125716276153800765906014206797548230661764274997562670900115383324605843933035314110752560290540848152237316752573471110899212429555149</span><br><span class="line">n[8]=102900163930497791064402577447949741195464555746599233552338455905339363524435647082637326033518083289523250670463907211548409422234391456982344516192210687545692054217151133151915216123275005464229534891629568864361154658107093228352829098251468904800809585061088484485542019575848774643260318502441084765867</span><br><span class="line">n[9]=97767951046154372321400443371234495476461828137251939025051233003462769415459435471728054384852461870179980010660162922547425212869925648424741526671585598167502856111641944825179295197098826911226483155821197251989297102189187139234080795582529077092266799813985026581245196104843272305656744384140745492897</span><br><span class="line">n[10]=93836514358344173762895084384953633159699750987954044414830106276642828025218933012478990865656107605541657809389659063108620208004740646099662700112782252200834393363574089818787717951026690934986964275526538236750596344542450864284576226592039259070002692883820960186403938410354082341916474419847211138467</span><br><span class="line">n[11]=112306066601652819062206435724795595603085908011001671184332227488970057128128821831260649058569739569103298091727188365019228385820143813415009397359257831092635374404034997011441653286642458431865026213129412677064308342580757248577955071384972714557250468686599901682728173096745710849318629959223270431039</span><br><span class="line">n[12]=90267480939368160749458049207367083180407266027531212674879245323647502822038591438536367206422215464489854541063867946215243190345476874546091188408120551902573113507876754578290674792643018845798263156849027209440979746485414654160320058352559498237296080490768064578067282805498131582552189186085941328701</span><br><span class="line">n[13]=94390533992358895550704225180484604016029781604622607833044135524814562613596803297695605669157378162035217814540004231075201420796787547733762265959320018107419058832819010681344133011777479722382525797938558181629835768471461434560813554411133962651212455645589624432040989600687436833459731886703583047283</span><br><span class="line">n[14]=120008876536855131221255979370745233738591934188224528487535120483456214085493237482915446419599357910343450285858995374277365393767669569942204888383426461862651659865189178784473131914234181752055950431093341514138390898892413182538823693941124637301582389014479754627419560568004831093116617428970538503551</span><br><span class="line">n[15]=147733349387696521015664992396355145811249793103958464053225389476050097503928022819269482555955365534137156079172704297584033078453033637103720972881068435459202133846880715879894340131656691631756162323422868846616160423755883726450486845175227682329583615739797782025647376042249605775433971714513081755709</span><br><span class="line">n[16]=90673177193017332602781813187879442725562909473411994052511479411887936365983777106776080722300002656952655125041151156684340743907349108729774157616323863062525593382279143395837261053976652138764279456528493914961780300269591722101449703932139132398288208673556967030162666354552157189525415838326249712949</span><br><span class="line">n[17]=111178307033150739104608647474199786251516913698936331430121060587893564405482896814045419370401816305592149685291034839621072343496556225594365571727260237484885924615887468053644519779081871778996851601207571981072261232384577126377714005550318990486619636734701266032569413421915520143377137845245405768733</span><br><span class="line">n[18]=93394639108667212482180458616036741615058981058942739509025631675767304945732437421192075466824789572910657586684470553691049259504106442090140927782673066834126848556317079995332229262871079799089771973100731889841015960713908117908583988637159206246729697336281050046919985463146705713899703248595045701819</span><br><span class="line">n[19]=94154993593274109828418786834159728190797445711539243887409583756844882924221269576486611543668906670821879426307992404721925623741478677756083992902711765865503466687919799394258306574702184666207180530598057989884729154273423032471322027993848437082723045300784582836897839491321003685598931080456249945287</span><br><span class="line">n[20]=90916739755838083837461026375700330885001446224187511395518230504776419813625940046511904838818660297497622072999229706061698225191645268591198600955240116302461331913178712722096591257619538927050886521512453691902946234986556913039431677697816965623861908091178749411071673467596883926097177996147858865293</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">c[0]=48641173720475702278690317652676924796340996697567087705119344461991930773386153198223372579328462635803653561516674380209276666328375805315553713680858906705068657158073776194628700821011001144559278784795978097710145192236347629751116534400207288736776545247409895672030976932673010818369814246455196991083</span><br><span class="line">c[1]=1626661141529320283833484152716550848856697186049377493478368799832043379420727509223318694347625977694500761460048670101820769656612419734057871562023463159698522348510157125720014700549254630959391701883372400982386084212421115166791728704867253734354874934210987301137512341070190760227227749365878233484</span><br><span class="line">c[2]=39632263504870478574861695051251850807454294787974709214866410237055871793939895562441267574482198916367858789237648434983815369123479208726344716594227785308836601932181727610859898951190206345056426253251079929822424252271957269630987623886812686545521745791771387808772030614435314730783528512800343192265</span><br><span class="line">c[3]=83421434286602546493364204139182949897795123160498680670964040331447569764445309937195566103281638928183742488663157138572020817924561990979723444797045375101801354862472761507421896454904818874439231990567738173059815647539737800523632262742398190575822391771655932895657208471832891505814792263361394479317</span><br><span class="line">c[4]=19560634556305755550927540610989537766715902244072312818350844104485773927537226443429404190213856361759564153804627450805880512600339869169513348929194643809859468549718922965997647689203029517135396008631050292544022651948009392475583045438153697076529266662217519588521116539517972522591294232192817502376</span><br><span class="line">c[5]=26054677793581772924866273737009673285775062802734786532404396138990264566536537921648515854012553861999940229349708989519156563830916553754762208466745321226835312974971739761769324569315525872096987367001543758380071859429619580182411498650200401467760546057912183435480924905200466941116258838789328064564</span><br><span class="line">c[6]=47190775807472506173587993082023759909601357229808667044044468676457696140445235738005020994278091230440755033222450219378047807646817722376918364211727971804312327204294555178996480944188624972632371674822397258127227029990196956900925820980263353418653201918881814896866168764140848945600419602253279143149</span><br><span class="line">c[7]=124929943232081828105808318993257526364596580021564021377503915670544445679836588765369503919311404328043203272693851622132258819278328852726005776082575583793735570095307898828254568015886630010269615546857335790791577865565021730890364239443651479580968112031521485174068731577348690810906553798608040451024</span><br><span class="line">c[8]=25585088950095290712328215701309273521406235982885781641137768116285362079062975527364909549362511146004390419156826709543326814581466248280564194951706937822088902607754944405407698735824315900942915322054614437632116732271787823814807624841386886185122143173564380877370643120953803688563589496390425159539</span><br><span class="line">c[9]=14375950543873882011796759348848479283522955796749853113492047625299699702886303193822347995567175524401038661237990847185236138967814088030767785916645492142741397786256445305366822277551514353423864240674522264407918605662008550545442780563568811883349771003546081844527788515420708612431091464410712019656</span><br><span class="line">c[10]=78852785408127338210375705302361611580033298047358566712385067002412358292419274287993295604646693755514055710305938805847184012173449160624823261013152092151242661538772012880714981492275731658527465442787266554947828301571586721387286510359738598116104180351027973922256460236377354127082438812404967605644</span><br><span class="line">c[11]=108387832390337770947361518376552702503741092284778824448943971792044922720461955035726863109418657218498659460663504872870862538725835055240750735576735249122665348803252691221869146679004017916359067454693701495389784159620341860394035373599823801288442604273046729873467936004227013186659110262247417571857</span><br><span class="line">c[12]=44374979291120575503988741531987454898919254880086464254904878064332010355432423956182135846738023874326776872139229379943321321362822522900479438294291206287205647145759972233097276253408812699557305314344220807356024994977399840843758750494467535572805794732065369887057841293267499209427585419962565568495</span><br><span class="line">c[13]=41663689952657185984513733558388033289292857758748468070934326941659317694408873831451567385012905508903797893149006067280788298408959017459890579859784072677410890657854942639040056924596925599973762214900728648657052474974405878868755028761443878403349272421153452240103741921751653022646614028009138548572</span><br><span class="line">c[14]=35133765260146855599194761500993159592311136378033858818728078464540389548474611501950689942825550399101504201020687961256642455745888410410524955937773951578993882275525944145131794970001708655718844507774877602125183877782393564092461821246419013099835940432551540513624090850765797735157630551978900512155</span><br><span class="line">c[15]=52253817590056116368273294519761274350847193477090280916373828903718796358618956145225746496960677477661151583828604021049936963779103440560630451125137344639503705880024677345063113240530798352727432768980751992926293801206779839157443722614687126711272753610923903360818026083573711899014859313677159790039</span><br><span class="line">c[16]=24086371701602948122317790211004032014326487279907486724991846810668564197542368948703436295770758262739732290677177527297040556666434577730354732397784651220918412407485171180732327730242552955646750279842251200227937257322414662213662054605527282812231172173474061845763736546747711105935349033514358348526</span><br><span class="line">c[17]=1395222187334055833498435136007269572138525113145744882969531037442244086277594803865217301719947066153176244638660864035949705664670633245110847416168796640199238733478540080417312141011028469385167826450855601412915611725028631975605932279023918771764204031806414734015476034106891049334159757621016327648</span><br><span class="line">c[18]=49047978458885807127192385282227726754593888749388775377492411121925201201621099927332087316607446894372751446254341808051569111053293066232980434901592875347200122022210780536817524813076908750647137301610117592355818408280291766068780616226847056325075159440352473034526412778650516438709293396458312728764</span><br><span class="line">c[19]=52958695992371180409414011678115981405835026800648278393085136639708219930134280877954018305615378579281651249142230848262822421713895227069561145945972448893229231020632492517869034217943260664130647322694583182800800838539691542175229797652856708373533581250607375664993806654537737027000328299623032632769</span><br><span class="line">c[20]=23204039098754030513954332212496652705175644349879686639449689791620605370809827884267260830136516742466455588549253481016504796674014871020503543639681251834114159250986728840380777774144853925216884802529230212783759821262799845229436535491711201551797166082529740271577684082458494926929260818927584104158</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><ul><li><p>遍历所有的模数N，判断是否存在模数相同的加密片段，如果猜测可以用共模攻击</p></li><li><p>遍历寻找任意两个模数N的公因子，如果得到不为1的公因子则可以因数碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历所有模数,找到模数相同的加密密文</span></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">if</span> n[i]==n[j]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;n[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]==&#x27;</span>+<span class="string">&#x27;n[&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历寻找任意两个模数N的公因子，如果得到不为1的公因子则可以成功分解这两个模数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">            <span class="keyword">if</span> n[i]==n[j]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rem=math.gcd(n[i],n[j])</span><br><span class="line">                <span class="keyword">if</span> rem!=<span class="number">1</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;gcd(n[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;],n[&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;]&gt;1&#x27;</span>)</span><br><span class="line">                        </span><br><span class="line">结果                        </span><br><span class="line"><span class="comment">#n[0]==n[4]</span></span><br><span class="line"><span class="comment">#gcd(n[1],n[18])&gt;1</span></span><br></pre></td></tr></table></figure></li><li><p>遍历所有加密指数e，寻找低加密指数及对应的加密对，可以用低指数广播攻击</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e[0]=46786465362686334917265996843779843233606992585424976481745055335468678697948774988450305612127967926533923268260412557000125153569622340353246096040604284883505587337829322949633637609180797447754513992039018904786537115087888005528547900640339270052628915440787357271345416818313808448127098885767015748889</span><br><span class="line">e[1]=e[2]=e[5]=e[6]=e[9]=e[10]=e[13]=e[14]=e[17]=e[18]=e[19]=65537</span><br><span class="line">e[2]=65537</span><br><span class="line">e[3]=e[8]=e[12]=e[16]=e[20]=5</span><br><span class="line">e[4]=152206992575706893484835984472544529509325440944131662631741403414037956695665533186650071476146389737020554215956181827422540843366433981607643940546405002217220286072880967331118344806315756304650248634546597784597963886656422706197757265316981889118026978865295597135470735576032282694348773714479076093197</span><br><span class="line">e[7]=e[11]=e[15]=3</span><br></pre></td></tr></table></figure><p>对上述的公钥e进行分析,主要有以下几种，其中e比较小的有3和5，其中</p><p>  Frame7，Frame11，Frame15采用低加密指数<code>e=3</code>进行加密</p><p>  Frame3，Frame8，Frame12，Frame16和Frame20均采用低加密指数<code>e=5</code>进行加密</p></li><li><p>采用费马分解尝试p,q差距比较小的帧和Pollard p-1分解进行尝试p,q差距比较大的帧</p><blockquote><p>Frame10可以用费马分解法破解</p><p>Frame2，6，19可以用p-1分解法破解</p></blockquote></li><li><p>Baidu or Google Hack</p></li></ul><h2 id="实例破解"><a href="#实例破解" class="headerlink" title="实例破解"></a>实例破解</h2><h3 id="公共模数攻击"><a href="#公共模数攻击" class="headerlink" title="公共模数攻击"></a>公共模数攻击</h3><p>n[0]&#x3D;&#x3D;n[4],还因为可能存在重复发包</p><p>设两个用户的公钥分别为 $e_1$ 和 $e_2$ ，且两者互质。明文消息为 $m$ ，密文分别为:<br>$$<br>\begin{aligned}<br>&amp;c_1&#x3D;m^{e_1} \bmod n \<br>&amp;c_2&#x3D;m^{e_2} \bmod n<br>\end{aligned}<br>$$<br>当攻击者截获 $c_1$ 和 $c_2$ 后，就可以恢复出明文。用扩展欧几里得算法求出 $r e_1+s e_2&#x3D;1 \bmod n$ 的两个整数 $r$ 和 $s$ ，由此可得:<br>$$<br>\begin{aligned}<br>c_1^r c_2^s &amp; \equiv m^{r e_1} m^{s e_2} \bmod n \<br>&amp; \equiv m^{\left(r e_1+s e_2\right)} \bmod n \<br>&amp; \equiv m \bmod n<br>\end{aligned}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#公共模数攻击</span></span><br><span class="line"><span class="comment">#扩展欧几里得算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exgcd</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">if</span> b==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>,<span class="number">0</span>,a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                x,y,r=exgcd(b,a%b)</span><br><span class="line">                x,y=y,(x-(a//b)*y)</span><br><span class="line">                <span class="keyword">return</span> x,y,r</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_mod_attack</span>(<span class="params">n,e1,e2,c1,c2</span>):</span><br><span class="line">    x,y,r=exgcd(e1,e2)</span><br><span class="line">    <span class="comment">#求模逆元</span></span><br><span class="line">    <span class="keyword">if</span> x&lt;<span class="number">0</span>:</span><br><span class="line">        x=-x;</span><br><span class="line">        c1=gmpy2.invert(c1,n)</span><br><span class="line">    <span class="keyword">elif</span> y&lt;<span class="number">0</span>:</span><br><span class="line">        y=-y;</span><br><span class="line">        c2=gmpy2.invert(c2,n) </span><br><span class="line">    <span class="comment">#求解明文</span></span><br><span class="line">    m=<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n)%n</span><br><span class="line">    <span class="comment">#将明文转换为hex</span></span><br><span class="line">    m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">    <span class="comment">#将hex转换为str</span></span><br><span class="line">    m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#公共模数攻击</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">            <span class="keyword">if</span> n[i]==n[j]:</span><br><span class="line">                m2=same_mod_attack(n[i],e[i],e[j],c[i],c[j])</span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)]=m2</span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(j)]=m2</span><br><span class="line">     <span class="built_in">print</span>(sloved)</span><br></pre></td></tr></table></figure><blockquote><p>{‘Frame0’: b’My secre’, ‘Frame4’: b’My secre’}</p></blockquote><h3 id="公因数碰撞攻击"><a href="#公因数碰撞攻击" class="headerlink" title="公因数碰撞攻击"></a>公因数碰撞攻击</h3><p>Frame1、Frame18采用该种攻击方法</p><p>因数碰撞法指的是, 如果参数选取不当, $p$ 或者 $q$ 在多个RSA加密中出现多次，那么生成不同的 $\mathrm{n}$ 可能会有相同的因子，我们假设 $\mathrm{p}$相同,$\mathrm{q}$不同，那么在<br>$$<br>\left{\begin{array}{l}<br>n_1&#x3D;p * q_1 \<br>n_2&#x3D;p * q_2<br>\end{array}\right.<br>$$<br>很容易知道<br>$$<br>\operatorname{gcd}\left(n_1, n_2\right)&#x3D;p<br>$$<br>这样很快就能将他们各自的私钥求解出来了。<br>代码过于简单, 直接<code>gcd</code>两个因数就行, 结果不为1就说明有相同因数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#公因数碰撞攻击</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_factor_attack</span>():</span><br><span class="line">        p_of_prime=gmpy2.gcd(n[<span class="number">1</span>],n[<span class="number">18</span>])</span><br><span class="line">        q1=n[<span class="number">1</span>]//p_of_prime</span><br><span class="line">        q18=n[<span class="number">18</span>]//p_of_prime</span><br><span class="line">        phi1=(p_of_prime-<span class="number">1</span>)*(q1-<span class="number">1</span>)<span class="comment">#计算欧拉函数</span></span><br><span class="line">        phi18=(p_of_prime-<span class="number">1</span>)*(q18-<span class="number">1</span>)<span class="comment">#计算欧拉函数</span></span><br><span class="line">        d1=gmpy2.invert(e[<span class="number">1</span>],phi1)<span class="comment">#计算私钥</span></span><br><span class="line">        d18=gmpy2.invert(e[<span class="number">18</span>],phi18)<span class="comment">#计算私钥</span></span><br><span class="line">        m1=<span class="built_in">pow</span>(c[<span class="number">1</span>],d1,n[<span class="number">1</span>])<span class="comment">#解密</span></span><br><span class="line">        m18=<span class="built_in">pow</span>(c[<span class="number">18</span>],d18,n[<span class="number">18</span>])<span class="comment">#解密</span></span><br><span class="line">        m1=<span class="built_in">hex</span>(m1)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m18=<span class="built_in">hex</span>(m18)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m1=binascii.unhexlify(m1)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        m18=binascii.unhexlify(m18)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        sloved[<span class="string">&#x27;Frame1&#x27;</span>]=m1</span><br><span class="line">        sloved[<span class="string">&#x27;Frame18&#x27;</span>]=m18</span><br></pre></td></tr></table></figure><blockquote><p>‘Frame1’: b’. Imagin’, ‘Frame18’: b’m A to B’</p></blockquote><h3 id="低指数广播攻击"><a href="#低指数广播攻击" class="headerlink" title="低指数广播攻击"></a>低指数广播攻击</h3><p>Frame3、Frame8、Frame12、Frame16、Frame20采用该种攻击方法</p><p>低加密指数广播攻击适合于$\mathrm{n}$很大,$e$很小的情况, 其适用的情况是如$\mathrm{n}$下的，当一条消息$m$发送给不同的接收者时，每个接收者的 $n$ 都不同，但是加密公钥都是相同的，我们假设公钥为3那么就有<br>$$<br>\left{\begin{array}{l}<br>C_1&#x3D;m^3 \bmod n_1 \<br>C_2&#x3D;m^3 \bmod n_2 \<br>C_3&#x3D;m^3 \bmod n_3<br>\end{array}\right.<br>$$<br>由中国剩余定理知道,我们是可以将 $m^3$ 算出来的，那么对其开立方就将明文给求出来了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中国剩余定理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinese_remainder_theorem</span>(<span class="params">backup</span>):</span><br><span class="line">        <span class="comment">#计算N的乘积</span></span><br><span class="line">        N=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> a,n <span class="keyword">in</span> backup:</span><br><span class="line">                N*=n</span><br><span class="line">        <span class="comment">#计算Ni</span></span><br><span class="line">        Ni=[]</span><br><span class="line">        <span class="keyword">for</span> a,n <span class="keyword">in</span> backup:</span><br><span class="line">                Ni.append(N//n)</span><br><span class="line">        <span class="comment">#计算Ni的模逆元</span></span><br><span class="line">        Ni_inverse=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Ni)):</span><br><span class="line">                Ni_inverse.append(gmpy2.invert(Ni[i],backup[i][<span class="number">1</span>]))</span><br><span class="line">        <span class="comment">#计算x</span></span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Ni)):</span><br><span class="line">                x+=backup[i][<span class="number">0</span>]*Ni[i]*Ni_inverse[i]</span><br><span class="line">        x=x%N</span><br><span class="line">        <span class="keyword">return</span> x,N</span><br><span class="line"></span><br><span class="line"><span class="comment">#低指数3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low_exponent_attack3</span>():</span><br><span class="line">        frame_range=[<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>]</span><br><span class="line">        backup=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                backup.append([c[i],n[i]])</span><br><span class="line">        x,N=chinese_remainder_theorem(backup)</span><br><span class="line">        <span class="comment">#开三次方根</span></span><br><span class="line">        m=gmpy2.iroot(x,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        sloved[<span class="string">&#x27;Frame7&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame11&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame15&#x27;</span>]=m</span><br><span class="line"><span class="comment">#低指数5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low_exponent_attack5</span>():</span><br><span class="line">        frame_range=[<span class="number">3</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">20</span>]</span><br><span class="line">        backup=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                backup.append([c[i],n[i]])</span><br><span class="line">        x,N=chinese_remainder_theorem(backup)</span><br><span class="line">        <span class="comment">#开五次方根</span></span><br><span class="line">        m=gmpy2.iroot(x,<span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line">        m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        sloved[<span class="string">&#x27;Frame3&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame8&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame12&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame16&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame20&#x27;</span>]=m</span><br></pre></td></tr></table></figure><blockquote><p>‘Frame7’: b’\xb8\xbc\xa2S)s\xcd\xd2’, ‘Frame11’: b’\xb8\xbc\xa2S)s\xcd\xd2’, ‘Frame15’: b’\xb8\xbc\xa2S)s\xcd\xd2’, ‘Frame3’: b’t is a f’, ‘Frame8’: b’t is a f’, ‘Frame12’: b’t is a f’, ‘Frame16’: b’t is a f’, ‘Frame20’: b’t is a f’</p></blockquote><p>可以看到Frame7，Frame11，Frame15采用低加密指数广播攻击出来是乱码，说明该种方法不正确</p><p>Frame3、Frame8、Frame12、Frame16、Frame20可以采用该种攻击方法</p><h3 id="Coppersmith广播攻击"><a href="#Coppersmith广播攻击" class="headerlink" title="Coppersmith广播攻击"></a>Coppersmith广播攻击</h3><p>Coppersmith 是干了这么一件事: 今有一个 $e$ 阶的多项式 $f$, 那么可以:</p><ul><li><p>在模 $n$ 意义下，快速求出 $n^{1 &#x2F; e}$ 以内的根</p></li><li><p>给定 $\beta$ ，快速求出模某个 $b$ 意义下较小的根，其中 $b \geq n^\beta$ ，是 $n$ 的因数。</p></li></ul><h3 id="Pollard-p-1分解法"><a href="#Pollard-p-1分解法" class="headerlink" title="Pollard p-1分解法"></a>Pollard p-1分解法</h3><p>Frame2、Frame6、Frame19均采用该种攻击方法</p><p>Pollard p-1分解法是一种用于分解大质数的算法，它是Pollard rho算法的一种变体。它的基本思想是利用费马小定理来找到大质数的一个小因子。</p><p>如果 $p$ 与 $q$ 都不超过 $10^{20}$ 次方, 若其中一个 $(p-1)$ 或 $(q-1)$ 的因子都很小的时候（适用于p-1或q-1能够被小素数整除的情况,在这里为了方便说明我们假设为 $(p-1))$ ,可以如下操作:<br>选取一个整数 $k$, 使其满足 $(p-1) \mid k!$，由费马小定理知道, $a$ 与 $p$ 互素 的时候有<br>$$<br>a^{p-1}&#x3D;1 \bmod p<br>$$<br>所以 $a^{k !}&#x3D;1 \bmod p \quad, \quad$即 $\mathrm{p} \mid\left(a^{k !}-1\right)$ 。 那么对于 $\mathrm{n}$ 与 $\left(a^{k !}-1\right)$ 必有公因数为 $\mathrm{p}$, 这样就可以把 $\mathrm{n}$ 分解出来了。 但是对于 $k$ 的选取还是有要求的，太小了 $(p-1) \mid k !$不会成立，太大了花费时间会很多。</p><blockquote><ol><li>首先选取一个合适的整数a和一个正整数B；</li><li>选择一个整数k，使得k满足2&lt;&#x3D;k&lt;&#x3D;B；</li><li>计算$a^k ~ mod ~ n$，然后将其与n计算最大公因数，记为d；</li><li>如果d是n的因子，则输出d；否则，将d作为下一次迭代的起点，重复执行第3步和第4步，直到找到一个因子或者达到最大迭代次数为止。</li></ol><p>在实际使用中，可以选择多个不同的a值和不同的B值，然后分别运行p-1分解法，取所有得到的因子的最大公因数作为最终的结果。</p><p>需要注意的是，p-1分解法的效率取决于选取的参数a和B的大小。如果a过小或B过大，算法可能无法找到因子；如果a过大或B过小，算法可能会陷入循环而无法得到结果。因此，在实际应用中需要进行合理的参数选择。</p><p>Get $\mathrm{n}$, an odd integer to be factored.</p><p>Let $\mathrm{a}&#x3D;2$ and $\mathrm{i}&#x3D;2$.</p><p>Compute $a&#x3D;a^i \bmod n$.</p><p>Compute $\mathrm{d}&#x3D;\operatorname{gcd}(\mathrm{a}-1, \mathrm{n})$.</p><p>If $1&lt;\mathrm{d}&lt;\mathrm{n}$, then output $\mathrm{d}$ as a factor of $\mathrm{n}$.</p><p>If $\mathrm{d}&#x3D;1$, then $\mathrm{i}&#x3D;\mathrm{i}+1$, and go to step 3.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Pollard&#x27;s p-1算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollard_p_1</span>(<span class="params">n</span>):</span><br><span class="line">        b=<span class="number">2</span>**<span class="number">20</span></span><br><span class="line">        a=<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,b+<span class="number">1</span>):</span><br><span class="line">                a=gmpy2.powmod(a,i,n)</span><br><span class="line">                d=gmpy2.gcd(a-<span class="number">1</span>,n)</span><br><span class="line">                <span class="keyword">if</span> d!=<span class="number">1</span> <span class="keyword">and</span> d!=n:</span><br><span class="line">                        q=n//d</span><br><span class="line">                        n=q*d</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollard_data</span>(<span class="params">n</span>):</span><br><span class="line">        frame_range=[<span class="number">2</span>,<span class="number">6</span>,<span class="number">19</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                temp_n=n[i]</span><br><span class="line">                temp_c=c[i]</span><br><span class="line">                temp_e=e[i]</span><br><span class="line">                p=pollard_p_1(temp_n)</span><br><span class="line">                q=temp_n//p</span><br><span class="line">                phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">                d=gmpy2.invert(temp_e,phi)</span><br><span class="line">                m=<span class="built_in">pow</span>(temp_c,d,temp_n)</span><br><span class="line">                m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">                m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)]=m</span><br></pre></td></tr></table></figure><blockquote><p>‘Frame2’: b’ That is’, ‘Frame6’: b’ “Logic ‘, ‘Frame19’: b’instein.’</p></blockquote><h3 id="费马分解法"><a href="#费马分解法" class="headerlink" title="费马分解法"></a>费马分解法</h3><p>如果 $p$ 和 $q$ 相差不大的话我们可以通过费马分解把 $p$ 和 $q$ 求出来, 原理如 下<br>$$<br>\mathrm{n}&#x3D;\mathrm{p} * \mathrm{q}&#x3D;\frac{1}{4}(p+q)^2-\frac{1}{4}(p-q)^2<br>$$<br>由于 $\mathrm{p}$ 与 $\mathrm{q}$ 相差不大, 所以 $\mathrm{p}-\mathrm{q}$ 相对于 $\mathrm{n}$ 和 $(p+q)^2$ 来说可以忽略不计, 所以有～<br>$$<br>2 \sqrt{\mathrm{n}} \approx \mathrm{p}+\mathrm{q}<br>$$<br>也就是说通过不断尝试就可以把 $\mathrm{p}$ 和 $\mathrm{q}$ 给计算出来了</p><p>p、q比较接近时，可以使用这种攻击方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 费马分解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_factorization</span>(<span class="params">n</span>):</span><br><span class="line">        a=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">        <span class="built_in">max</span>=<span class="number">200000</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">max</span>):</span><br><span class="line">                b2=a*a-n</span><br><span class="line">                b=gmpy2.iroot(b2,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> gmpy2.is_square(b2):</span><br><span class="line">                        p=a-b</span><br><span class="line">                        q=a+b</span><br><span class="line">                        <span class="keyword">return</span> p,q</span><br><span class="line">                a+=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_data</span>():</span><br><span class="line">        frame_range=[<span class="number">10</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                p,q=fermat_factorization(n[i])</span><br><span class="line">                phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)<span class="comment">#计算欧拉函数</span></span><br><span class="line">                d=gmpy2.invert(e[i],phi)<span class="comment">#计算私钥</span></span><br><span class="line">                m=<span class="built_in">pow</span>(c[i],d,n[i])<span class="comment">#解密</span></span><br><span class="line">                m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">                m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)]=m</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经检验,Frame10可以采用该种攻击方法</p><blockquote><p>‘Frame10’: b’will get’</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>帧号</th><th>value</th><th>solution</th></tr></thead><tbody><tr><td>Frame0</td><td>My secre</td><td>公共模数攻击</td></tr><tr><td>Frame1</td><td>. Imagin</td><td>公因数碰撞攻击</td></tr><tr><td>Frame2</td><td>That is</td><td>Pollard rho-p-1分解法</td></tr><tr><td>Frame3</td><td>t is a f</td><td>低指数广播攻击</td></tr><tr><td>Frame4</td><td>My secre</td><td>公共模数攻击</td></tr><tr><td>Frame5</td><td></td><td></td></tr><tr><td>Frame6</td><td>“Logic</td><td>Pollard rho-p-1分解法</td></tr><tr><td>Frame7</td><td>\xb8\xbc\xa2S)s\xcd\xd2</td><td></td></tr><tr><td>Frame8</td><td>t is a f</td><td>低指数广播攻击</td></tr><tr><td>Frame9</td><td></td><td></td></tr><tr><td>Frame10</td><td>will get</td><td>费马分解法</td></tr><tr><td>Frame11</td><td>\xb8\xbc\xa2S)s\xcd\xd2</td><td></td></tr><tr><td>Frame12</td><td>t is a f</td><td>低指数广播攻击</td></tr><tr><td>Frame13</td><td></td><td></td></tr><tr><td>Frame14</td><td></td><td></td></tr><tr><td>Frame15</td><td>\xb8\xbc\xa2S)s\xcd\xd2</td><td></td></tr><tr><td>Frame16</td><td>t is a f</td><td>低指数广播攻击</td></tr><tr><td>Frame17</td><td></td><td></td></tr><tr><td>Frame18</td><td>m A to B</td><td>公因数碰撞攻击</td></tr><tr><td>Frame19</td><td>instein.</td><td>Pollard rho-p-1分解法</td></tr><tr><td>Frame20</td><td>t is a f</td><td>低指数广播攻击</td></tr></tbody></table><p>整理一下My secret is a f__instein. That is “Logic will get__m A to B. Imagin__</p><p>根据搜索结果可以补全后面的saying的内容,根据语义也可以填充前面的内容</p><p> My secret is a famous saying of Albert Einstein. That is “Logic will get you from A to B. Imagination will take you everywhere.“</p><p><img src="/./RSAattack.assets/image-20230908144419298.png" alt="image-20230908144419298"></p><p>​<img src="/./RSAattack.assets/image-20230908144427957.png" alt="image-20230908144427957"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><p>[2016 全国高校密码数学挑战赛-赛题三] <a href="https://www.tr0y.wang/2017/10/31/RSA2016/">https://www.tr0y.wang/2017/10/31/RSA2016/</a></p></li><li><p>[现代密码学大作业] <a href="https://blog.csdn.net/m0_63571390/article/details/122375466?spm=1001.2014.3001.5501">https://blog.csdn.net/m0_63571390/article/details/122375466?spm=1001.2014.3001.5501</a></p></li><li><p>[关于RSA的几种攻击手段] <a href="https://blog.csdn.net/pigeon_1/article/details/114371456">https://blog.csdn.net/pigeon_1/article/details/114371456</a></p></li><li><p>[Twenty Years of Attacks on the RSA Cryptosystem] <a href="https://www.ams.org/notices/199902/boneh.pdf">https://www.ams.org/notices/199902/boneh.pdf</a></p></li><li><p>[On using Pollard’s p-1 Algorithm to Factor RPrime RSA Modulus] <a href="https://www.scitepress.org/Papers/2018/100836/100836.pdf">https://www.scitepress.org/Papers/2018/100836/100836.pdf</a></p></li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">n=[]<span class="comment">#模数集合</span></span><br><span class="line">e=[]<span class="comment">#公钥指数集合</span></span><br><span class="line">c=[]<span class="comment">#密文集合</span></span><br><span class="line">m=&#123;<span class="built_in">zip</span>([<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>)],<span class="string">&#x27;&#x27;</span>)&#125;</span><br><span class="line"><span class="comment"># Path: code\main.py</span></span><br><span class="line">sloved=&#123;&#125;<span class="comment">#已解密的密文集合</span></span><br><span class="line">filename=[<span class="string">&#x27;data\Frame&#x27;</span>+<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>)]<span class="comment">#文件名集合</span></span><br><span class="line"><span class="comment"># print(filename)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">        f=<span class="built_in">open</span>(filename[i],<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        data=f.read()</span><br><span class="line">        <span class="comment">#str-&gt;hex-&gt;int</span></span><br><span class="line">        n.append(<span class="built_in">int</span>(data[:<span class="number">256</span>],<span class="number">16</span>))</span><br><span class="line">        e.append(<span class="built_in">int</span>(data[<span class="number">256</span>:<span class="number">512</span>],<span class="number">16</span>))</span><br><span class="line">        c.append(<span class="built_in">int</span>(data[<span class="number">512</span>:],<span class="number">16</span>))</span><br><span class="line"><span class="comment">#输出e的值</span></span><br><span class="line"><span class="comment"># for i in range(0,21):</span></span><br><span class="line"><span class="comment">#     print(&#x27;e[&#x27;+str(i)+&#x27;]=&#x27;+str(e[i]))</span></span><br><span class="line"><span class="comment"># #输出n的值</span></span><br><span class="line"><span class="comment"># for i in range(0,21):</span></span><br><span class="line"><span class="comment">#     print(&#x27;n[&#x27;+str(i)+&#x27;]=&#x27;+str(n[i]))</span></span><br><span class="line"><span class="comment"># #输出c的</span></span><br><span class="line"><span class="comment"># for i in range(0,21):</span></span><br><span class="line"><span class="comment">#     print(&#x27;c[&#x27;+str(i)+&#x27;]=&#x27;+str(c[i]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历所有模数,找到模数相同的加密密文</span></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">if</span> n[i]==n[j]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;n[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]==&#x27;</span>+<span class="string">&#x27;n[&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历寻找任意两个模数N的公因子，如果得到不为1的公因子则可以成功分解这两个模数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">            <span class="keyword">if</span> n[i]==n[j]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rem=math.gcd(n[i],n[j])</span><br><span class="line">                <span class="keyword">if</span> rem!=<span class="number">1</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;gcd(n[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;],n[&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;])=&#x27;</span>+<span class="built_in">str</span>(rem))</span><br><span class="line"></span><br><span class="line"><span class="comment">#公共模数攻击</span></span><br><span class="line"><span class="comment">#扩展欧几里得算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exgcd</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">if</span> b==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>,<span class="number">0</span>,a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                x,y,r=exgcd(b,a%b)</span><br><span class="line">                x,y=y,(x-(a//b)*y)</span><br><span class="line">                <span class="keyword">return</span> x,y,r</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_mod_attack</span>(<span class="params">n,e1,e2,c1,c2</span>):</span><br><span class="line">    x,y,r=exgcd(e1,e2)</span><br><span class="line">    <span class="comment">#求模逆元</span></span><br><span class="line">    <span class="keyword">if</span> x&lt;<span class="number">0</span>:</span><br><span class="line">        x=-x;</span><br><span class="line">        c1=gmpy2.invert(c1,n)</span><br><span class="line">    <span class="keyword">elif</span> y&lt;<span class="number">0</span>:</span><br><span class="line">        y=-y;</span><br><span class="line">        c2=gmpy2.invert(c2,n) </span><br><span class="line">    <span class="comment">#求解明文</span></span><br><span class="line">    m=<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n)%n</span><br><span class="line">    <span class="comment">#将明文转换为hex</span></span><br><span class="line">    m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">    <span class="comment">#将hex转换为str</span></span><br><span class="line">    m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#公因数碰撞攻击</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_factor_attack</span>():</span><br><span class="line">        p_of_prime=gmpy2.gcd(n[<span class="number">1</span>],n[<span class="number">18</span>])</span><br><span class="line">        q1=n[<span class="number">1</span>]//p_of_prime</span><br><span class="line">        q18=n[<span class="number">18</span>]//p_of_prime</span><br><span class="line">        phi1=(p_of_prime-<span class="number">1</span>)*(q1-<span class="number">1</span>)<span class="comment">#计算欧拉函数</span></span><br><span class="line">        phi18=(p_of_prime-<span class="number">1</span>)*(q18-<span class="number">1</span>)<span class="comment">#计算欧拉函数</span></span><br><span class="line">        d1=gmpy2.invert(e[<span class="number">1</span>],phi1)<span class="comment">#计算私钥</span></span><br><span class="line">        d18=gmpy2.invert(e[<span class="number">18</span>],phi18)<span class="comment">#计算私钥</span></span><br><span class="line">        m1=<span class="built_in">pow</span>(c[<span class="number">1</span>],d1,n[<span class="number">1</span>])<span class="comment">#解密</span></span><br><span class="line">        m18=<span class="built_in">pow</span>(c[<span class="number">18</span>],d18,n[<span class="number">18</span>])<span class="comment">#解密</span></span><br><span class="line">        m1=<span class="built_in">hex</span>(m1)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m18=<span class="built_in">hex</span>(m18)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m1=binascii.unhexlify(m1)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        m18=binascii.unhexlify(m18)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        sloved[<span class="string">&#x27;Frame1&#x27;</span>]=m1</span><br><span class="line">        sloved[<span class="string">&#x27;Frame18&#x27;</span>]=m18</span><br><span class="line"><span class="comment">#中国剩余定理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinese_remainder_theorem</span>(<span class="params">backup</span>):</span><br><span class="line">        <span class="comment">#计算N的乘积</span></span><br><span class="line">        N=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> a,n <span class="keyword">in</span> backup:</span><br><span class="line">                N*=n</span><br><span class="line">        <span class="comment">#计算Ni</span></span><br><span class="line">        Ni=[]</span><br><span class="line">        <span class="keyword">for</span> a,n <span class="keyword">in</span> backup:</span><br><span class="line">                Ni.append(N//n)</span><br><span class="line">        <span class="comment">#计算Ni的模逆元</span></span><br><span class="line">        Ni_inverse=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Ni)):</span><br><span class="line">                Ni_inverse.append(gmpy2.invert(Ni[i],backup[i][<span class="number">1</span>]))</span><br><span class="line">        <span class="comment">#计算x</span></span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Ni)):</span><br><span class="line">                x+=backup[i][<span class="number">0</span>]*Ni[i]*Ni_inverse[i]</span><br><span class="line">        x=x%N</span><br><span class="line">        <span class="keyword">return</span> x,N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#低指数3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low_exponent_attack3</span>():</span><br><span class="line">        frame_range=[<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>]</span><br><span class="line">        backup=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                backup.append([c[i],n[i]])</span><br><span class="line">        x,N=chinese_remainder_theorem(backup)</span><br><span class="line">        <span class="comment">#开三次方根</span></span><br><span class="line">        m=gmpy2.iroot(x,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        sloved[<span class="string">&#x27;Frame7&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame11&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame15&#x27;</span>]=m</span><br><span class="line"></span><br><span class="line"><span class="comment">#低指数5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low_exponent_attack5</span>():</span><br><span class="line">        frame_range=[<span class="number">3</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">20</span>]</span><br><span class="line">        backup=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                backup.append([c[i],n[i]])</span><br><span class="line">        x,N=chinese_remainder_theorem(backup)</span><br><span class="line">        <span class="comment">#开五次方根</span></span><br><span class="line">        m=gmpy2.iroot(x,<span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line">        m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">        m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">        sloved[<span class="string">&#x27;Frame3&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame8&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame12&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame16&#x27;</span>]=m</span><br><span class="line">        sloved[<span class="string">&#x27;Frame20&#x27;</span>]=m</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 费马分解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_factorization</span>(<span class="params">n</span>):</span><br><span class="line">        a=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">        <span class="built_in">max</span>=<span class="number">200000</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">max</span>):</span><br><span class="line">                b2=a*a-n</span><br><span class="line">                b=gmpy2.iroot(b2,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> gmpy2.is_square(b2):</span><br><span class="line">                        p=a-b</span><br><span class="line">                        q=a+b</span><br><span class="line">                        <span class="keyword">return</span> p,q</span><br><span class="line">                a+=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_data</span>():</span><br><span class="line">        frame_range=[<span class="number">10</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                p,q=fermat_factorization(n[i])</span><br><span class="line">                phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)<span class="comment">#计算欧拉函数</span></span><br><span class="line">                d=gmpy2.invert(e[i],phi)<span class="comment">#计算私钥</span></span><br><span class="line">                m=<span class="built_in">pow</span>(c[i],d,n[i])<span class="comment">#解密</span></span><br><span class="line">                m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">                m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)]=m</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#Pollard&#x27;s p-1算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollard_p_1</span>(<span class="params">n</span>):</span><br><span class="line">        b=<span class="number">2</span>**<span class="number">20</span></span><br><span class="line">        a=<span class="number">2</span></span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">        <span class="comment">#         a=gmpy2.powmod(a,b,n)</span></span><br><span class="line">        <span class="comment">#         d=gmpy2.gcd(a-1,n)</span></span><br><span class="line">        <span class="comment">#         if d!=1 and d!=n:</span></span><br><span class="line">        <span class="comment">#                 return d</span></span><br><span class="line">        <span class="comment">#         a+=1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,b+<span class="number">1</span>):</span><br><span class="line">                a=gmpy2.powmod(a,i,n)</span><br><span class="line">                d=gmpy2.gcd(a-<span class="number">1</span>,n)</span><br><span class="line">                <span class="keyword">if</span> d!=<span class="number">1</span> <span class="keyword">and</span> d!=n:</span><br><span class="line">                        q=n//d</span><br><span class="line">                        n=q*d</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollard_data</span>(<span class="params">n</span>):</span><br><span class="line">        frame_range=[<span class="number">2</span>,<span class="number">6</span>,<span class="number">19</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> frame_range:</span><br><span class="line">                temp_n=n[i]</span><br><span class="line">                temp_c=c[i]</span><br><span class="line">                temp_e=e[i]</span><br><span class="line">                p=pollard_p_1(temp_n)</span><br><span class="line">                q=temp_n//p</span><br><span class="line">                phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">                d=gmpy2.invert(temp_e,phi)</span><br><span class="line">                m=<span class="built_in">pow</span>(temp_c,d,temp_n)</span><br><span class="line">                m=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]<span class="comment">#去掉0x</span></span><br><span class="line">                m=binascii.unhexlify(m)[-<span class="number">8</span>:]<span class="comment">#hex-&gt;str</span></span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)]=m</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#公共模数攻击</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">            <span class="keyword">if</span> n[i]==n[j]:</span><br><span class="line">                m2=same_mod_attack(n[i],e[i],e[j],c[i],c[j])</span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)]=m2</span><br><span class="line">                sloved[<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(j)]=m2</span><br><span class="line">     <span class="comment">#公因数碰撞攻击</span></span><br><span class="line">    same_factor_attack()</span><br><span class="line">    <span class="built_in">print</span>(sloved)</span><br><span class="line">     <span class="comment">#低指数攻击</span></span><br><span class="line">    low_exponent_attack3()</span><br><span class="line">    low_exponent_attack5()</span><br><span class="line">    <span class="built_in">print</span>(sloved)</span><br><span class="line">    <span class="comment">#费马分解</span></span><br><span class="line">    fermat_data()</span><br><span class="line">    <span class="built_in">print</span>(sloved)</span><br><span class="line">    <span class="comment">#Pollard&#x27;s p-1算法</span></span><br><span class="line">    pollard_data(n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(sloved)</span><br><span class="line">    <span class="comment">#输出将地点按照帧数排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">            Frame_name=<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">            <span class="keyword">if</span> Frame_name <span class="keyword">in</span> sloved:</span><br><span class="line">                    <span class="built_in">print</span>(Frame_name+<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(sloved[Frame_name])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(Frame_name+<span class="string">&#x27;:Not sloved&#x27;</span>)</span><br><span class="line">                        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目摘要&quot;&gt;&lt;a href=&quot;#题目摘要&quot; class=&quot;headerlink&quot; title=&quot;题目摘要&quot;&gt;&lt;/a&gt;题目摘要&lt;/h2&gt;&lt;h3 id=&quot;赛题名称：-RSA-加密体制破译&quot;&gt;&lt;a href=&quot;#赛题名称：-RSA-加密体制破译&quot; class=&quot;head</summary>
      
    
    
    
    <category term="course" scheme="http://niceasiv.cn/categories/course/"/>
    
    
    <category term="Crypto" scheme="http://niceasiv.cn/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Week 6 - Programming Assignment</title>
    <link href="http://niceasiv.cn/2022/10/31/Week6%20quiz/"/>
    <id>http://niceasiv.cn/2022/10/31/Week6%20quiz/</id>
    <published>2022-10-31T10:16:09.000Z</published>
    <updated>2023-09-08T05:46:24.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><p><strong>更好的效果PDF:<a href="https://niceasiv.cn/pdf/">pdf文章列表 | Asiv’s Blog (niceasiv.cn)</a></strong></p><h3 id="Factoring-challenge-1"><a href="#Factoring-challenge-1" class="headerlink" title="Factoring challenge #1:"></a><strong>Factoring challenge #1:</strong></h3><p>Your goal in this project is to break RSA when the public modulus $N$ is generated incorrectly. This should serve as yet another reminder not to implement crypto primitives yourself.</p><p>Normally, the primes that comprise an RSA modulus are generated independently of one another. But suppose a developer decides to generate the first prime $p$ by choosing a random number $R$ and scanning for a prime close by. The second prime $q$ is generated by scanning for some other random prime also close to $R$.<br>We show that the resulting RSA modulus $N&#x3D;p q$ can be easily factored.</p><blockquote><p>在公开的N没有被正确的生成时破解RSA。通常在RSA中构成模数N的素数q和p,应该独立生成。如果开发者使用一个随机数R,并选择R附近的两个素数作为q和p，那么这种情况情况下生成的RSA模数N就很容易被破解。</p></blockquote><p>Suppose you are given a composite(合数) $N$ and are told that $N$ is a product of two relatively close primes $p$ and $q$, namely $p$ and $q$ satisfy<br>$$<br>|p-q|&lt;2 N^{1 &#x2F; 4}<br>$$<br>Your goal is to factor $N$.<br>Let $A$ be the arithmetic(算数) average of the two primes, that is $A&#x3D;\frac{p+q}{2}$. Since $p$ and $q$ are odd(奇数), we know that $p+q$ is even and therefore $A$ is an integer(整数).</p><blockquote><p>可以得到 $A&#x3D;\frac{p+q}{2}&lt;N^{\frac{1}{4}}$</p></blockquote><p>To factor $N$ you first observe that under condition $\left.{ }^<em>\right)$ the quantity $\sqrt{N}$ is very close to $A$. In particular, we show below that:<br>$$<br>{A-\sqrt{N}&lt;1}</em><br>$$<br>But since $A$ is an integer, rounding $\sqrt{N}$ up to the closest integer reveals the value of $A$. In code, $A&#x3D;$ ceil $(\operatorname{sqrt}(N))$ where “ceil” is the ceiling function.<br>Visually, the numbers $p, q, \sqrt{N}$ and $A$ are ordered as follows:</p><p><img src="https://cdn.niceasiv.cn/20221101002400.png"></p><p>Since $A$ is the exact mid-point between $p$ and $q$ there is an integer $x$ such that $p&#x3D;A-x$ and $q&#x3D;A+x$. But then $N&#x3D;p q&#x3D;(A-x)(A+x)&#x3D;A^2-x^2$ and therefore $x&#x3D;\sqrt{A^2-N}$.</p><p>Now, given $x$ and $A$ you can find the factors $p$ and $q$ of $N$ since $p&#x3D;A-x$ and $q&#x3D;A+x$. You have now factored $N$ !</p><blockquote><p>因为$A$是$p$,$q$的中点</p><p>$\therefore$ $p&#x3D;A-x$  $q&#x3D;A+x$$\implies N&#x3D;p q&#x3D;(A-x)(A+x)&#x3D;A^2-x^2$</p><p>$\therefore x&#x3D;\sqrt{A^2-N}$</p><p>所以得到$x$的值可以得到$p,q$的取值</p></blockquote><p>Further reading: the method described above is a greatly simplified version of a much more general result on factoring when the high order bits of the prime factor are known.</p><p>In the following challenges, you will factor the given moduli using the method outlined above. To solve this assignment it is best to use an environment that supports multi-precision arithmetic and square roots.  In Python you could use the <a href="http://readthedocs.org/docs/gmpy2/en/latest/mpz.html#mpz-methods">gmpy2</a> module.  In C you can use <a href="http://gmplib.org/">GMP</a>.</p><p>The following modulus $N$ is a products of two primes $p$ and $q$ where $|p-q|&lt;2 N^{1 &#x2F; 4}*$. Find the smaller of the two factors and enter it as a decimal integer in the box below.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N = 17976931348623159077293051907890247336179769789423065727343008115 \</span><br><span class="line">77326758055056206869853794492129829595855013875371640157101398586 \</span><br><span class="line">47833778606925583497541085196591615128057575940752635007475935288 \</span><br><span class="line">71082364994994077189561705436114947486504671101510156394068052754 \</span><br><span class="line">0071584560878577663743040086340742855278549092581</span><br></pre></td></tr></table></figure><p>For completeness, let us see why $A-\sqrt{N}&lt;1$. This follows from the following simple calculation.<br>First observe that $A^2-N&#x3D;\left(\frac{p+q}{2}\right)^2-N&#x3D;\frac{p^2+2 N+q^2}{4}-N&#x3D;\frac{p^2-2 N+q^2}{4}&#x3D;(p-q)^2 &#x2F; 4$.<br>Now, since for all $x, y: \quad(x-y)(x+y)&#x3D;x^2-y^2$ we obtain $A-\sqrt{N}&#x3D;(A-\sqrt{N}) \frac{A+\sqrt{N}}{A+\sqrt{N}}&#x3D;$ $\frac{A^2-N}{A+\sqrt{N}}&#x3D;\frac{(p-q)^2 &#x2F; 4}{A+\sqrt{N}}$<br>Since $\sqrt{N} \leq A$ it follows that $A-\sqrt{N} \leq \frac{(p-q)^2 &#x2F; 4}{2 \sqrt{N}}&#x3D;\frac{(p-q)^2}{8 \sqrt{N}}$.<br>By assumption (*) we know that $(p-q)^2&lt;4 \sqrt{N}$ and therefore $A-\sqrt{N} \leq \frac{4 \sqrt{N}}{8 \sqrt{N}}&#x3D;1 &#x2F; 2$ as required.</p><blockquote><p>$0&lt;A-\sqrt{N}&lt;1$$\implies A&lt;\sqrt{N}+1$</p><p>$\text{proof:}$</p><p>${A}&#x3D;\frac{p+q}{2}, {~N}&#x3D;{pq}$ $A$为整数</p><p><strong>对左边:</strong> </p><p>$0&lt;{A}-\sqrt{N}$ :<br>由基本不等式 $\sqrt{ab}\leq\frac{a+b}{2}$ 可以得到 $\sqrt{pq}&lt;\frac{p+q}{2}$<br>因为 $p\neq q$ ，所以无法取到等号，所以 $\sqrt{pq}&lt;{A}$$\implies 0&lt;A-\sqrt{N}$$\implies\sqrt{N}&lt;{A}$</p><p><strong>对右边:</strong></p><p> $A-\sqrt{N}&lt;1$,有:</p><p>$$<br>\mathrm{A}^2-\mathrm{N}&#x3D;\left(\frac{\mathrm{p}+\mathrm{q}}{2}\right)^2-\mathrm{N}&#x3D;\frac{\mathrm{p}^2+2 \mathrm{<del>N}+\mathrm{q}^2}{4}-\mathrm{N}&#x3D;\frac{\mathrm{p}^2-2 \mathrm{</del>N}+\mathrm{q}^2}{4}&#x3D;\frac{(\mathrm{p}-\mathrm{q})^2}{4}\tag{1}<br>$$<br>对于 $A-\sqrt{N}$ ，有:<br>$$<br>A-\sqrt{N}&#x3D;\frac{(A-\sqrt{N})(A+\sqrt{N})}{A+\sqrt{N}}&#x3D;\frac{A^2-N}{A+\sqrt{N}}&#x3D;{A+\sqrt{N}}&#x3D;\frac{\frac{(p-q)^2}{4}}{A+\sqrt{N}} \tag{1}<br>$$<br>由于 $\sqrt{N}&lt;A$ ，那么，<br>$$<br>A-\sqrt{\mathrm{N}}&#x3D;\frac{\frac{(\mathrm{p}-\mathrm{q})^2}4}{\mathrm{~A}+\sqrt{\mathrm{N}}}&lt;\frac{\frac{(\mathrm{p}-\mathrm{q})^2}4}{\sqrt{\mathrm{N}}+\sqrt{\mathrm{N}}}&#x3D;\frac{(\mathrm{p}-\mathrm{q})^2}{8 \sqrt{\mathrm{N}}}  \tag{3}<br>$$<br>由于challenge #1满足 $|p-q|&lt;2 N^{1 &#x2F; 4}$ ，即 $(p-q)^2&lt;4 \sqrt{N}$ ，最后得到:<br>$$<br>\mathrm{A}-\sqrt{\mathrm{N}}&#x3D;\frac{(\mathrm{p}-\mathrm{q})^2}{8 \sqrt{\mathrm{N}}}&lt;\frac{4 \sqrt{\mathrm{N}}}{8 \sqrt{\mathrm{N}}}&#x3D;1 &#x2F; 2&lt;1 \tag{4}<br>$$</p></blockquote><p>Enter the answer for factoring challenge #1 in the box below:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13407807929942597099574024998205846127479365820592393377723561443721764030073662768891111614362326998675040546094339320838419523375986027530441562135724301</span><br></pre></td></tr></table></figure><p>code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    <span class="comment">#初始化大整数n</span></span><br><span class="line">    n =gmpy2.mpz(<span class="string">&#x27;17976931348623159077293051907890247336179769789423065727343008115&#x27;</span> + </span><br><span class="line">            <span class="string">&#x27;77326758055056206869853794492129829595855013875371640157101398586&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;47833778606925583497541085196591615128057575940752635007475935288&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;71082364994994077189561705436114947486504671101510156394068052754&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;0071584560878577663743040086340742855278549092581&#x27;</span>)</span><br><span class="line">    <span class="comment">#得到n的平方根的整数部分</span></span><br><span class="line">    A,r=gmpy2.isqrt_rem(n)<span class="comment">#A为整数部分，r为余数</span></span><br><span class="line">    <span class="keyword">if</span> r&gt;<span class="number">0</span>:</span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line">    <span class="comment">#得到x</span></span><br><span class="line">    x=gmpy2.isqrt(A**<span class="number">2</span>-n)</span><br><span class="line">    <span class="comment">#得到p和q</span></span><br><span class="line">    p,q=A-x,A+x</span><br><span class="line">    <span class="comment">#检验p和q是否为素数且p*q=n</span></span><br><span class="line">    <span class="keyword">if</span> gmpy2.is_prime(p) <span class="keyword">and</span> gmpy2.is_prime(q) <span class="keyword">and</span> gmpy2.mul(p,q)==n:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    task1()</span><br></pre></td></tr></table></figure><h3 id="Factoring-challenge-2"><a href="#Factoring-challenge-2" class="headerlink" title="Factoring challenge #2:"></a><strong>Factoring challenge #2:</strong></h3><p>The following modulus $N$ is a products of two primes $p$ and $q$ where $|p-q|&lt;2^{11} N^{1 &#x2F; 4}$. Find the smaller of the two factors and enter it as a decimal integer.</p><p>Hint: in this case $A-\sqrt{N}&lt;2^{20}$ so try scanning for $A$ from $\sqrt{N}$ upwards, until you succeed in factoring $N$.</p><blockquote><p>$\text{Proof:}$</p><p>由Factoring challenge #1的证明</p><p>${A}&#x3D;\frac{p+q}{2}, {~N}&#x3D;{pq}$ $A$为整数</p><p>$|p-q|&lt;2^{11} N^{1 &#x2F; 4}$$\implies$$(p-q)^2&lt;2^{22}\sqrt{N}$</p><p>由公式$3$可以得到<br>$$<br>0&lt;A-\sqrt{\mathrm{N}}&#x3D;\frac{\frac{(\mathrm{p}-\mathrm{q})^2}4}{\mathrm{~A}+\sqrt{\mathrm{N}}}&lt;\frac{\frac{(\mathrm{p}-\mathrm{q})^2}4}{\sqrt{\mathrm{N}}+\sqrt{\mathrm{N}}}&#x3D;\frac{(\mathrm{p}-\mathrm{q})^2}{8 \sqrt{\mathrm{N}}}&lt;\frac{2^{22}\sqrt{N}}{8\sqrt{N}}&#x3D;2^{19}\tag{5}<br>$$<br>因此$A$的范围应该在$(\sqrt{N},2^{19}+\sqrt{N})$</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N =6484558428080716696628242653467722787263437207069762630604390703787 \</span><br><span class="line">9730861808111646271401527606141756919558732184025452065542490671989 \</span><br><span class="line">2428844841839353281972988531310511738648965962582821502504990264452 \</span><br><span class="line">1008852816733037111422964210278402893076574586452336833570778346897 \</span><br><span class="line">15838646088239640236866252211790085787877</span><br></pre></td></tr></table></figure><p>Enter the answer for factoring challenge #2 in the box below:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25464796146996183438008816563973942229341454268524157846328581927885777969985222835143851073249573454107384461557193173304497244814071505790566593206419759</span><br></pre></td></tr></table></figure><p>Code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task2</span>():</span><br><span class="line">    <span class="comment">#初始化大整数n</span></span><br><span class="line">    n =gmpy2.mpz(<span class="string">&#x27;6484558428080716696628242653467722787263437207069762630604390703787&#x27;</span>+<span class="string">&#x27;9730861808111646271401527606141756919558732184025452065542490671989&#x27;</span>+</span><br><span class="line">                  <span class="string">&#x27;2428844841839353281972988531310511738648965962582821502504990264452&#x27;</span>+<span class="string">&#x27;1008852816733037111422964210278402893076574586452336833570778346897 &#x27;</span>+<span class="string">&#x27;15838646088239640236866252211790085787877&#x27;</span>)</span><br><span class="line">    <span class="comment">#初始化得到n的平方根的整数部分</span></span><br><span class="line">    A=gmpy2.isqrt(n)+<span class="number">1</span><span class="comment">#A为整数部分 向上取整A^2&gt;n</span></span><br><span class="line">    <span class="comment">#循环次数</span></span><br><span class="line">    max_count=<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">    <span class="comment">#得到x</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_count):</span><br><span class="line">        x,r=gmpy2.isqrt_rem(A**<span class="number">2</span>-n)</span><br><span class="line">        <span class="comment">#得到p和q</span></span><br><span class="line">        <span class="keyword">if</span> r==<span class="number">0</span>:</span><br><span class="line">            p,q=A-x,A+x</span><br><span class="line">            <span class="comment">#检验p和q是否为素数且p*q=n</span></span><br><span class="line">            <span class="keyword">if</span> gmpy2.is_prime(p) <span class="keyword">and</span> gmpy2.is_prime(q) <span class="keyword">and</span> gmpy2.mul(p,q)==n:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;[!] Found it count=&#x27;</span>,i)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    task2()</span><br></pre></td></tr></table></figure><h3 id="Factoring-challenge-3"><a href="#Factoring-challenge-3" class="headerlink" title="Factoring challenge #3:"></a>Factoring challenge #3:</h3><p>The following modulus $N$ is a product of two primes $p$ and $q$ where $|3 p-2 q|&lt;N^{1 &#x2F; 4}$. Find the smaller of the two factors and enter it as a decimal integer.<br>Hint: first show that $\sqrt{6 N}$ is close to $\frac{3 p+2 q}{2}$ and then adapt the method in challenge #1 to factor $N$.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N =72006226374735042527956443552558373833808445147399984182665305798191 \</span><br><span class="line">63556901883377904234086641876639384851752649940178970835240791356868 \</span><br><span class="line">77441155132015188279331812309091996246361896836573643119174094961348 \</span><br><span class="line">52463970788523879939683923036467667022162701835329944324119217381272 \</span><br><span class="line">9276147530748597302192751375739387929</span><br></pre></td></tr></table></figure><blockquote><p>$A-\sqrt{6N}&lt;\frac{1}{8\sqrt{6}}$</p><p>$\text{Proof:}$</p><p>定义$A&#x3D;\frac{3p+2q}{2}$即$A$是$3p$和$2q$的中点，且$3p$是奇数,$2q$是偶数，所以$A$一定不是整数</p><p>由challenge #1同理</p><p>$\because $$\text{A是3p,2q的中点}$</p><p>$\therefore$ $p&#x3D;\frac{A-x}{3}$  $q&#x3D;\frac{A+x}{2}$$\implies N&#x3D;p q&#x3D;\frac{(A-x)(A+x)}{6}&#x3D;\frac{A^2-x^2}{6}$(这里其实$\frac{A-x}{3}$有可能为p或者q,还要根据$A-x$是否被3除尽就可确定)</p><p>$\therefore x&#x3D;\sqrt{A^2-6N}$</p><p>所以得到$x$的值可以得到$p,q$的取值</p><p>由$\sqrt{ab}&lt;&#x3D;\frac{a+b}{2}$</p><p>$\therefore{\sqrt{6pq}&lt;\frac{3p+2q}{2}}$$\implies \sqrt{6N}&lt;A$</p><p>$$<br>A-\sqrt{6N}&#x3D;\frac{A^2-6N}{A+\sqrt{6N}}&#x3D;\frac{\frac{(3p-2q)^2}{4}}{A+\sqrt{6N}}&lt;\frac{\frac{(3p-2q)^2}{4}}{\sqrt{6N}+\sqrt{6N}}&#x3D;\frac{\frac{(3p-2q)^2}{4}}{2\sqrt{6N}}  \tag {6}<br>$$<br>由于challenge3满足$|3 p-2 q|&lt;N^{1 &#x2F; 4}$即是$(3p-2q)^2&lt;\sqrt{N}$<br>$$<br>A-\sqrt{6N}&lt;\frac{\frac{(3p-2q)^2}{4}}{2\sqrt{6N}}&lt;\frac{1}{8\sqrt{6}}<br>$$</p></blockquote><p>Enter the answer for factoring challenge #3 in the box below: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21909849592475533092273988531583955898982176093344929030099423584127212078126150044721102570957812665127475051465088833555993294644190955293613411658629209</span><br></pre></td></tr></table></figure><p>code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">    x = n</span><br><span class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x = y</span><br><span class="line">        y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task3</span>():</span><br><span class="line">   </span><br><span class="line">    n=<span class="number">720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929</span></span><br><span class="line">    getcontext().prec=<span class="number">350</span><span class="comment">#设置精度</span></span><br><span class="line">    A=Decimal(isqrt(<span class="number">6</span>*n))+Decimal(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x=Decimal(A**<span class="number">2</span>-<span class="number">6</span>*Decimal(n)).sqrt()</span><br><span class="line">        p=<span class="built_in">int</span>(A-x)</span><br><span class="line">        q=<span class="built_in">int</span>(A+x)</span><br><span class="line">        <span class="keyword">if</span> p*q==<span class="number">6</span>*n:</span><br><span class="line">            <span class="keyword">if</span> p%<span class="number">3</span>==<span class="number">0</span> <span class="keyword">and</span> q%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                p//=<span class="number">3</span></span><br><span class="line">                q//=<span class="number">2</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> p%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">and</span> q%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">                p//=<span class="number">2</span></span><br><span class="line">                q//=<span class="number">3</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    <span class="built_in">print</span>(q)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    task3()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p>The  challenge ciphertext provided below is the result of encrypting a short secret ASCII plaintext using the RSA modulus given in the first factorization challenge. </p><p>The encryption exponent used is $e&#x3D;65537$ The ASCII plaintext was encoded using PKCS v1.5 before the RSA function was applied, as described in <a href="https://www-origin.coursera.org/learn/crypto/lecture/JwjDq/pkcs-1">PKCS</a>.</p><p>Use the factorization you obtained for this RSA modulus to decrypt this challenge ciphertext and enter the resulting English plaintext in the box below.  Recall that the factorization of $N$ enables you to compute $\varphi(N)$from which you can obtain the RSA decryption exponent.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Challenge ciphertext (as a decimal integer):</span><br><span class="line">22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540</span><br></pre></td></tr></table></figure><p>After you use the decryption exponent to decrypt the challenge ciphertext you will obtain a PKCS1 encoded plaintext.To undo the encoding it is best to write the decrypted value in hex.You will observe that the number starts with a ‘0x02’ followed by many random non-zero digits.Look for the ‘0x00’ separator and the digits following this separator are the ASCII letters of the plaintext.</p><p>(note: the separator used here is ‘0x00’, not ‘0xFF’ as stated in the lecture)</p><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">公钥就是 N，e 而 私钥就是N，d</span><br><span class="line">加密</span><br><span class="line">m^e ≡ c (mod n)</span><br><span class="line">解密</span><br><span class="line">c^d ≡ m (mod n)</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task4</span>():</span><br><span class="line">    c = gmpy2.mpz(<span class="string">&#x27;22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;46583996794288946076454204058156474898801373486412045232522932017648791666640299750918872997169052608322206777160001932&#x27;</span> + </span><br><span class="line">            <span class="string">&#x27;9260870009579993724077458967773697817571267229951148662959627934791540&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    n = gmpy2.mpz(<span class="string">&#x27;17976931348623159077293051907890247336179769789423065727343008115&#x27;</span> + </span><br><span class="line">            <span class="string">&#x27;77326758055056206869853794492129829595855013875371640157101398586&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;47833778606925583497541085196591615128057575940752635007475935288&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;71082364994994077189561705436114947486504671101510156394068052754&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;0071584560878577663743040086340742855278549092581&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    e =gmpy2.mpz(<span class="number">65537</span>)</span><br><span class="line"></span><br><span class="line">    a = gmpy2.isqrt(n) + <span class="number">1</span></span><br><span class="line">    x = gmpy2.isqrt(a**<span class="number">2</span> - n)</span><br><span class="line"></span><br><span class="line">    p = a - x</span><br><span class="line">    q = a + x</span><br><span class="line"></span><br><span class="line">    fi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)<span class="comment">#欧拉函数</span></span><br><span class="line"></span><br><span class="line">    d = gmpy2.invert(e, fi)<span class="comment">#求e的模fi的逆元</span></span><br><span class="line"></span><br><span class="line">    r = gmpy2.powmod(c, d, n)<span class="comment">#求c的d次方模n</span></span><br><span class="line">    <span class="comment">#PKCS解密</span></span><br><span class="line">    m = gmpy2.digits(r, <span class="number">16</span>).split(<span class="string">&#x27;00&#x27;</span>)[<span class="number">1</span>]<span class="comment">#将r转换为16进制，然后以00为分隔符分割，取第二个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(m.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(task4())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Factoring lets us break RSA.</span><br></pre></td></tr></table></figure><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://blog.csdn.net/chuxuezheerer/article/details/106675580">实验四 RSA中公开的模数N_chuxuezheerer的博客-CSDN博客_rsa 模数</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Content&quot;&gt;&lt;a href=&quot;#Content&quot; class=&quot;headerlink&quot; title=&quot;Content&quot;&gt;&lt;/a&gt;Content&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;更好的效果PDF:&lt;a href=&quot;https://niceasiv.cn/pdf/</summary>
      
    
    
    
    <category term="course" scheme="http://niceasiv.cn/categories/course/"/>
    
    
    <category term="Crypto" scheme="http://niceasiv.cn/tags/Crypto/"/>
    
  </entry>
  
</feed>
